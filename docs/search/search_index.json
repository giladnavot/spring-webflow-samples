{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"spring-webflow-samples The spring-webflow-samples repository is a collection of sample projects demonstrating the use of Spring Web Flow. It contains various sub-projects, each showcasing different aspects of Spring Web Flow. For example, the webflow-showcase directory contains XML files configuring Spring controllers and web flows, while the 'primefaces-showcase' directory contains Java classes demonstrating different features like file upload, AJAX, validation, etc. Similarly, the booking-faces and booking-mvc directories contain sample applications for booking scenarios using JSF and Spring MVC respectively. Getting started Modules Booking faces Exploring the Booking Faces Sample Project Maven Configuration in booking-faces Incorporating JSF Components into the Spring Framework Communication between JSF Components and the Server Side Exploring Entities in the Booking-Faces Module Getting Started with Configuration Classes Understanding the Basic Concepts of a Webapp Getting Started with Testing in Booking-Faces Web inf Understanding the Role of WEB-INF in the Booking-Faces Application Introduction to Flows Booking mvc Getting Started with Booking MVC Maven Configuration in booking-mvc Understanding Entities in the Booking MVC Module Introduction to Config Overview of Webapp Web inf Understanding the Role of WEB-INF in Web Applications Basic Concepts of Hotels in Booking-MVC Introduction to Layouts in Booking MVC Primefaces showcase Overview of the Primefaces Showcase Building the PrimeFaces Showcase with Maven Understanding Webflow in Spring Framework Web app Basic Concepts of a Web App in Primefaces-Showcase Overview of Flows Understanding Spring in the Primefaces-Showcase Project Layouts Understanding Layouts Views Understanding Views in PrimeFaces Showcase Webflow showcase Introduction to Webflow Showcase Maven Configuration in webflow-showcase Basic Concepts of WEB-INF Flows Introduction to Flows Basic Concepts of Embedded Flow Styles Basic Concepts of Styles in Spring Web Flow Samples Basic Concepts of Blueprint in Webflow Exploring Plugins in Webflow Showcase Main flows Booking Flow Process Booking Validation Process Configuring Spring Web Flow in booking-mvc Hotel Counting Process Hotel Data Loading Process Hotel Search Process Row Count Retrieval Process Test Booking Flow Total Booking Duration Calculation Web Flow Handling Process Classes BookingService Interface in Booking mvc Overview of the BookingService Interface in Booking Faces Build Tools Configuring and Using Maven in the Spring Web Flow Samples Project This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Home"},{"location":"#spring-webflow-samples","text":"The spring-webflow-samples repository is a collection of sample projects demonstrating the use of Spring Web Flow. It contains various sub-projects, each showcasing different aspects of Spring Web Flow. For example, the webflow-showcase directory contains XML files configuring Spring controllers and web flows, while the 'primefaces-showcase' directory contains Java classes demonstrating different features like file upload, AJAX, validation, etc. Similarly, the booking-faces and booking-mvc directories contain sample applications for booking scenarios using JSF and Spring MVC respectively. Getting started","title":"spring-webflow-samples"},{"location":"#modules","text":"","title":"Modules"},{"location":"#booking-faces","text":"Exploring the Booking Faces Sample Project Maven Configuration in booking-faces Incorporating JSF Components into the Spring Framework Communication between JSF Components and the Server Side Exploring Entities in the Booking-Faces Module Getting Started with Configuration Classes Understanding the Basic Concepts of a Webapp Getting Started with Testing in Booking-Faces Web inf Understanding the Role of WEB-INF in the Booking-Faces Application Introduction to Flows","title":"Booking faces"},{"location":"#booking-mvc","text":"Getting Started with Booking MVC Maven Configuration in booking-mvc Understanding Entities in the Booking MVC Module Introduction to Config Overview of Webapp Web inf Understanding the Role of WEB-INF in Web Applications Basic Concepts of Hotels in Booking-MVC Introduction to Layouts in Booking MVC","title":"Booking mvc"},{"location":"#primefaces-showcase","text":"Overview of the Primefaces Showcase Building the PrimeFaces Showcase with Maven Understanding Webflow in Spring Framework Web app Basic Concepts of a Web App in Primefaces-Showcase Overview of Flows Understanding Spring in the Primefaces-Showcase Project Layouts Understanding Layouts Views Understanding Views in PrimeFaces Showcase","title":"Primefaces showcase"},{"location":"#webflow-showcase","text":"Introduction to Webflow Showcase Maven Configuration in webflow-showcase Basic Concepts of WEB-INF Flows Introduction to Flows Basic Concepts of Embedded Flow Styles Basic Concepts of Styles in Spring Web Flow Samples Basic Concepts of Blueprint in Webflow Exploring Plugins in Webflow Showcase","title":"Webflow showcase"},{"location":"#main-flows","text":"Booking Flow Process Booking Validation Process Configuring Spring Web Flow in booking-mvc Hotel Counting Process Hotel Data Loading Process Hotel Search Process Row Count Retrieval Process Test Booking Flow Total Booking Duration Calculation Web Flow Handling Process","title":"Main flows"},{"location":"#classes","text":"BookingService Interface in Booking mvc Overview of the BookingService Interface in Booking Faces","title":"Classes"},{"location":"#build-tools","text":"Configuring and Using Maven in the Spring Web Flow Samples Project This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Build Tools"},{"location":"basic-concepts-of-a-web-app-in-primefaces-showcase.gho4gck3.sw/","text":"A Web app in the primefaces-showcase project refers to a Java-based web application. It is defined and configured using XML files located in the WEB-INF directory. These files include 'web.xml' which is the deployment descriptor of the application, 'beans.xml' for defining beans, 'faces-config.xml' for JSF configuration, and various other XML files for Spring and Web Flow configurations. Web App Configuration This is the main configuration file for the web app. It defines the servlets, filters, listeners, and context parameters that are used by the application. It also specifies the welcome file for the application. web-app xmlns= http://java.sun.com/xml/ns/javaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd version= 3.0 !-- SPRING ROOT WEB APPLICATION CONTEXT -- context-param param-name contextConfigLocation /param-name param-value /WEB-INF/spring/root-context.xml, /WEB-INF/spring/servlet-context.xml /param-value /context-param listener listener-class org.springframework.web.context.ContextLoaderListener /listener-class /listener Spring Configuration This file is part of the Spring configuration. It is referenced in the web.xml file and is used to configure the Spring root application context. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd !-- Root Context: defines shared resources visible to all other web components -- import resource= security-config.xml / import resource= servlet-context.xml / /beans JSF Configuration This file is part of the JSF configuration. It is used to configure the JSF application, including the message bundle used for localization. ?xml version='1.0' encoding='UTF-8'? faces-config xmlns= http://java.sun.com/xml/ns/javaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd version= 2.0 application message-bundle JsfMessageResources /message-bundle /application /faces-config Spring Web Flow Configuration This file is part of the Spring Web Flow configuration. It is used to configure the Spring Web Flow system, which handles the execution of flows within the application. xsi:schemaLocation= http://www.springframework.org/schema/webflow-config https://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/faces https://www.springframework.org/schema/faces/spring-faces.xsd !-- Executes flows: the central entry point into the Spring Web Flow system -- Web Application Endpoints Understanding Web Application Endpoints /login Endpoint The /login endpoint is defined here. When a client makes a request to this URL, the application will display the login view. This is handled by the UrlBasedViewResolver in the servlet context, which resolves 'login' to /WEB-INF/views/login.xhtml . mvc:view-controller path= /login / /home Endpoint The /home endpoint is defined here. When a client makes a request to this URL, the application will display the home view. This is also handled by the UrlBasedViewResolver in the servlet context, which resolves 'home' to /WEB-INF/views/home.xhtml . mvc:view-controller path= /home / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Basic Concepts of a Web App in Primefaces-Showcase"},{"location":"basic-concepts-of-a-web-app-in-primefaces-showcase.gho4gck3.sw/#web-app-configuration","text":"This is the main configuration file for the web app. It defines the servlets, filters, listeners, and context parameters that are used by the application. It also specifies the welcome file for the application. web-app xmlns= http://java.sun.com/xml/ns/javaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd version= 3.0 !-- SPRING ROOT WEB APPLICATION CONTEXT -- context-param param-name contextConfigLocation /param-name param-value /WEB-INF/spring/root-context.xml, /WEB-INF/spring/servlet-context.xml /param-value /context-param listener listener-class org.springframework.web.context.ContextLoaderListener /listener-class /listener","title":"Web App Configuration"},{"location":"basic-concepts-of-a-web-app-in-primefaces-showcase.gho4gck3.sw/#spring-configuration","text":"This file is part of the Spring configuration. It is referenced in the web.xml file and is used to configure the Spring root application context. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd !-- Root Context: defines shared resources visible to all other web components -- import resource= security-config.xml / import resource= servlet-context.xml / /beans","title":"Spring Configuration"},{"location":"basic-concepts-of-a-web-app-in-primefaces-showcase.gho4gck3.sw/#jsf-configuration","text":"This file is part of the JSF configuration. It is used to configure the JSF application, including the message bundle used for localization. ?xml version='1.0' encoding='UTF-8'? faces-config xmlns= http://java.sun.com/xml/ns/javaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd version= 2.0 application message-bundle JsfMessageResources /message-bundle /application /faces-config","title":"JSF Configuration"},{"location":"basic-concepts-of-a-web-app-in-primefaces-showcase.gho4gck3.sw/#spring-web-flow-configuration","text":"This file is part of the Spring Web Flow configuration. It is used to configure the Spring Web Flow system, which handles the execution of flows within the application. xsi:schemaLocation= http://www.springframework.org/schema/webflow-config https://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/faces https://www.springframework.org/schema/faces/spring-faces.xsd !-- Executes flows: the central entry point into the Spring Web Flow system --","title":"Spring Web Flow Configuration"},{"location":"basic-concepts-of-a-web-app-in-primefaces-showcase.gho4gck3.sw/#web-application-endpoints","text":"Understanding Web Application Endpoints","title":"Web Application Endpoints"},{"location":"basic-concepts-of-a-web-app-in-primefaces-showcase.gho4gck3.sw/#login-endpoint","text":"The /login endpoint is defined here. When a client makes a request to this URL, the application will display the login view. This is handled by the UrlBasedViewResolver in the servlet context, which resolves 'login' to /WEB-INF/views/login.xhtml . mvc:view-controller path= /login /","title":"/login Endpoint"},{"location":"basic-concepts-of-a-web-app-in-primefaces-showcase.gho4gck3.sw/#home-endpoint","text":"The /home endpoint is defined here. When a client makes a request to this URL, the application will display the home view. This is also handled by the UrlBasedViewResolver in the servlet context, which resolves 'home' to /WEB-INF/views/home.xhtml . mvc:view-controller path= /home / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"/home Endpoint"},{"location":"basic-concepts-of-blueprint-in-webflow.c7c9i5v9.sw/","text":"Blueprint is a CSS framework that aims to cut down on your CSS development time. It gives you a solid CSS foundation to build your project on top of, with an easy-to-use grid, sensible typography, and even a stylesheet for printing. In the context of this repository, Blueprint is used to style the web pages. It provides a set of CSS files that are used across the application to ensure a consistent look and feel. These files include a grid system (grid.css), typography rules (typography.css), form styling (forms.css), and specific styles for Internet Explorer (ie.css) and print layouts (print.css). The grid system provided by Blueprint helps in creating page layouts through a series of containers, rows, and columns. The typography.css file provides styles for different HTML elements to ensure consistent typography across the application. The forms.css file provides styles for form elements, and the print.css and ie.css files provide specific styles for print layouts and Internet Explorer respectively. In addition to these, Blueprint also provides helper classes that can be used to modify the appearance of elements. For example, the .loud class in typography.css can be used to make the text color black, and the .quiet class can be used to make the text color grey. Blueprint Grid System The grid system in Blueprint is defined in the grid.css file. It provides classes for different column widths ( .span-1 to .span-24 ), which can be used to create a responsive layout. /* Sets up basic grid floating and margin. */ .column, div.span-1, div.span-2, div.span-3, div.span-4, div.span-5, div.span-6, div.span-7, div.span-8, div.span-9, div.span-10, div.span-11, div.span-12, div.span-13, div.span-14, div.span-15, div.span-16, div.span-17, div.span-18, div.span-19, div.span-20, div.span-21, div.span-22, div.span-23, div.span-24 { float: left; margin-right: 10px; } /* The last column in a row needs this class. */ .last, div.last { margin-right: 0; } /* Use these classes to set the width of a column. */ .span-1 {width: 30px;} .span-2 {width: 70px;} .span-3 {width: 110px;} .span-4 {width: 150px;} .span-5 {width: 190px;} .span-6 {width: 230px;} .span-7 {width: 270px;} .span-8 {width: 310px;} .span-9 {width: 350px;} .span-10 {width: 390px;} Blueprint Typography The typography.css file in Blueprint sets up default typography for the web application. It provides styles for different heading levels (h1 to h6), paragraphs, links, and more. /* Default font settings. The font-size percentage is of 16px. (0.75 * 16px = 12px) */ html { font-size:100.01%; } body { font-size: 75%; color: #222; background: #fff; font-family: Helvetica Neue , Arial, Helvetica, sans-serif; } /* Headings -------------------------------------------------------------- */ h1,h2,h3,h4,h5,h6 { font-weight: normal; color: #111; } h1 { font-size: 3em; line-height: 1; margin-bottom: 0.5em; } h2 { font-size: 2em; margin-bottom: 0.75em; } h3 { font-size: 1.5em; line-height: 1; margin-bottom: 1em; } h4 { font-size: 1.2em; line-height: 1.25; margin-bottom: 1.25em; } h5 { font-size: 1em; font-weight: bold; margin-bottom: 1.5em; } Blueprint Forms Blueprint's forms.css file sets up default styling for forms. It provides classes for different form elements like input fields, checkboxes, and radio buttons. label { font-weight: bold; } fieldset { padding:1.4em; margin: 0 0 1.5em 0; border: 1px solid #ccc; } legend { font-weight: bold; font-size:1.2em; } /* Form fields -------------------------------------------------------------- */ input[type=text], input[type=password], input.text, input.title, textarea, select { background-color:#fff; border:1px solid #bbb; } input[type=text]:focus, input[type=password]:focus, Blueprint Reset The reset.css file in Blueprint resets default browser CSS. This helps in maintaining consistency in appearance across different browsers. html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, code, del, dfn, em, img, q, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td { margin: 0; padding: 0; border: 0; font-weight: inherit; font-style: inherit; font-size: 100%; font-family: inherit; vertical-align: baseline; } body { line-height: 1.5; } /* Tables still need 'cellspacing= 0 ' in the markup. */ This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Basic Concepts of Blueprint in Webflow"},{"location":"basic-concepts-of-blueprint-in-webflow.c7c9i5v9.sw/#blueprint-grid-system","text":"The grid system in Blueprint is defined in the grid.css file. It provides classes for different column widths ( .span-1 to .span-24 ), which can be used to create a responsive layout. /* Sets up basic grid floating and margin. */ .column, div.span-1, div.span-2, div.span-3, div.span-4, div.span-5, div.span-6, div.span-7, div.span-8, div.span-9, div.span-10, div.span-11, div.span-12, div.span-13, div.span-14, div.span-15, div.span-16, div.span-17, div.span-18, div.span-19, div.span-20, div.span-21, div.span-22, div.span-23, div.span-24 { float: left; margin-right: 10px; } /* The last column in a row needs this class. */ .last, div.last { margin-right: 0; } /* Use these classes to set the width of a column. */ .span-1 {width: 30px;} .span-2 {width: 70px;} .span-3 {width: 110px;} .span-4 {width: 150px;} .span-5 {width: 190px;} .span-6 {width: 230px;} .span-7 {width: 270px;} .span-8 {width: 310px;} .span-9 {width: 350px;} .span-10 {width: 390px;}","title":"Blueprint Grid System"},{"location":"basic-concepts-of-blueprint-in-webflow.c7c9i5v9.sw/#blueprint-typography","text":"The typography.css file in Blueprint sets up default typography for the web application. It provides styles for different heading levels (h1 to h6), paragraphs, links, and more. /* Default font settings. The font-size percentage is of 16px. (0.75 * 16px = 12px) */ html { font-size:100.01%; } body { font-size: 75%; color: #222; background: #fff; font-family: Helvetica Neue , Arial, Helvetica, sans-serif; } /* Headings -------------------------------------------------------------- */ h1,h2,h3,h4,h5,h6 { font-weight: normal; color: #111; } h1 { font-size: 3em; line-height: 1; margin-bottom: 0.5em; } h2 { font-size: 2em; margin-bottom: 0.75em; } h3 { font-size: 1.5em; line-height: 1; margin-bottom: 1em; } h4 { font-size: 1.2em; line-height: 1.25; margin-bottom: 1.25em; } h5 { font-size: 1em; font-weight: bold; margin-bottom: 1.5em; }","title":"Blueprint Typography"},{"location":"basic-concepts-of-blueprint-in-webflow.c7c9i5v9.sw/#blueprint-forms","text":"Blueprint's forms.css file sets up default styling for forms. It provides classes for different form elements like input fields, checkboxes, and radio buttons. label { font-weight: bold; } fieldset { padding:1.4em; margin: 0 0 1.5em 0; border: 1px solid #ccc; } legend { font-weight: bold; font-size:1.2em; } /* Form fields -------------------------------------------------------------- */ input[type=text], input[type=password], input.text, input.title, textarea, select { background-color:#fff; border:1px solid #bbb; } input[type=text]:focus, input[type=password]:focus,","title":"Blueprint Forms"},{"location":"basic-concepts-of-blueprint-in-webflow.c7c9i5v9.sw/#blueprint-reset","text":"The reset.css file in Blueprint resets default browser CSS. This helps in maintaining consistency in appearance across different browsers. html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, code, del, dfn, em, img, q, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td { margin: 0; padding: 0; border: 0; font-weight: inherit; font-style: inherit; font-size: 100%; font-family: inherit; vertical-align: baseline; } body { line-height: 1.5; } /* Tables still need 'cellspacing= 0 ' in the markup. */ This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Blueprint Reset"},{"location":"basic-concepts-of-embedded-flow.gkl7ckei.sw/","text":"An embedded flow in Spring Web Flow is a sub-flow that is called within the context of a parent flow. It's a reusable module that can be included in multiple parent flows. In the embedded-flow directory, the flow.xml file defines the flow of the application. It contains view states like step1 and step2 , and end states like success and cancel . Each state represents a step in the flow and defines transitions to other states based on events. The JSP files like step1.jsp , step2.jsp , success.jsp , and cancel.jsp are the views associated with these states. The views.xml file is a Tiles definitions file that maps logical view names to JSP files. Embedded Flow Definition This is the definition of the embedded flow. It consists of two view states ( step1 and step2 ), and two end states ( success and cancel ). Transitions between the states are defined using the 'transition' element. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd view-state id= step1 view= embeddedFlow/step1 transition on= next to= step2 / transition on= cancel to= cancel / /view-state view-state id= step2 view= embeddedFlow/step2 transition on= previous to= step1 / transition on= finish to= success / transition on= cancel to= cancel / /view-state end-state id= success view= embeddedFlow/success / end-state id= cancel view= embeddedFlow/cancel / Using the Embedded Flow This is an example of how the embedded flow is used. The 'step1' view state is rendered using the step1.jsp file. The 'next' and 'cancel' events trigger transitions to the 'step2' and 'cancel' states, respectively. ```java server pages This is step 1 of the embedded flow Cancel Next Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'next',event:'onclick',formId:'step1',params:{fragments:\"body\"}})); Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'cancel',event:'onclick',formId:'step1',params:{fragments:\"body\"}})); --- /SwmSnippet SwmSnippet path= /webflow-showcase/src/main/webapp/WEB-INF/flows/embedded-flow/step2.jsp line= 1 --- Similarly, the 'step2' view state is rendered using the `step2.jsp` file. The 'previous', 'finish', and 'cancel' events trigger transitions to the 'step1', 'success', and 'cancel' states, respectively. ```java server pages div id= embeddedFlow p class= notice This is step 2 of the embedded flow /p form id= step2 action= ${flowExecutionUrl} method= POST input type= hidden name= ${_csrf.parameterName} value= ${_csrf.token} / button id= cancel type= submit name= _eventId_cancel Cancel /button button id= previous type= submit name= _eventId_previous lt; lt; Previous /button button id= finish type= submit name= _eventId_finish Finish gt; gt; /button script type= text/javascript Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'finish',event:'onclick',formId:'step2',params:{fragments: body }})); Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'previous',event:'onclick',formId:'step2',params:{fragments: body }})); Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'cancel',event:'onclick',formId:'step2',params:{fragments: body }})); /script /form /div Embedded Flow Functions The Embedded flow consists of several view-states and end-states that guide the user through a process. The flow is defined in the flow.xml file and each state is associated with a specific view. View-State The view-state represents a stage in the flow where a view is displayed to the user. In the Embedded flow, there are two view-states: 'step1' and 'step2'. Each view-state is associated with a specific view (e.g., 'embeddedFlow/step1' and 'embeddedFlow/step2') and defines transitions to other states based on user actions. view-state id= step1 view= embeddedFlow/step1 transition on= next to= step2 / transition on= cancel to= cancel / /view-state view-state id= step2 view= embeddedFlow/step2 transition on= previous to= step1 / transition on= finish to= success / End-State The end-state represents the end of the flow. In the Embedded flow, there are two end-states: 'success' and 'cancel'. Each end-state is associated with a specific view (e.g., 'embeddedFlow/success' and 'embeddedFlow/cancel'). end-state id= success view= embeddedFlow/success / end-state id= cancel view= embeddedFlow/cancel / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Basic Concepts of Embedded Flow"},{"location":"basic-concepts-of-embedded-flow.gkl7ckei.sw/#embedded-flow-definition","text":"This is the definition of the embedded flow. It consists of two view states ( step1 and step2 ), and two end states ( success and cancel ). Transitions between the states are defined using the 'transition' element. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd view-state id= step1 view= embeddedFlow/step1 transition on= next to= step2 / transition on= cancel to= cancel / /view-state view-state id= step2 view= embeddedFlow/step2 transition on= previous to= step1 / transition on= finish to= success / transition on= cancel to= cancel / /view-state end-state id= success view= embeddedFlow/success / end-state id= cancel view= embeddedFlow/cancel /","title":"Embedded Flow Definition"},{"location":"basic-concepts-of-embedded-flow.gkl7ckei.sw/#using-the-embedded-flow","text":"This is an example of how the embedded flow is used. The 'step1' view state is rendered using the step1.jsp file. The 'next' and 'cancel' events trigger transitions to the 'step2' and 'cancel' states, respectively. ```java server pages This is step 1 of the embedded flow Cancel Next Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'next',event:'onclick',formId:'step1',params:{fragments:\"body\"}})); Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'cancel',event:'onclick',formId:'step1',params:{fragments:\"body\"}})); --- /SwmSnippet SwmSnippet path= /webflow-showcase/src/main/webapp/WEB-INF/flows/embedded-flow/step2.jsp line= 1 --- Similarly, the 'step2' view state is rendered using the `step2.jsp` file. The 'previous', 'finish', and 'cancel' events trigger transitions to the 'step1', 'success', and 'cancel' states, respectively. ```java server pages div id= embeddedFlow p class= notice This is step 2 of the embedded flow /p form id= step2 action= ${flowExecutionUrl} method= POST input type= hidden name= ${_csrf.parameterName} value= ${_csrf.token} / button id= cancel type= submit name= _eventId_cancel Cancel /button button id= previous type= submit name= _eventId_previous lt; lt; Previous /button button id= finish type= submit name= _eventId_finish Finish gt; gt; /button script type= text/javascript Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'finish',event:'onclick',formId:'step2',params:{fragments: body }})); Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'previous',event:'onclick',formId:'step2',params:{fragments: body }})); Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'cancel',event:'onclick',formId:'step2',params:{fragments: body }})); /script /form /div","title":"Using the Embedded Flow"},{"location":"basic-concepts-of-embedded-flow.gkl7ckei.sw/#embedded-flow-functions","text":"The Embedded flow consists of several view-states and end-states that guide the user through a process. The flow is defined in the flow.xml file and each state is associated with a specific view.","title":"Embedded Flow Functions"},{"location":"basic-concepts-of-embedded-flow.gkl7ckei.sw/#view-state","text":"The view-state represents a stage in the flow where a view is displayed to the user. In the Embedded flow, there are two view-states: 'step1' and 'step2'. Each view-state is associated with a specific view (e.g., 'embeddedFlow/step1' and 'embeddedFlow/step2') and defines transitions to other states based on user actions. view-state id= step1 view= embeddedFlow/step1 transition on= next to= step2 / transition on= cancel to= cancel / /view-state view-state id= step2 view= embeddedFlow/step2 transition on= previous to= step1 / transition on= finish to= success /","title":"View-State"},{"location":"basic-concepts-of-embedded-flow.gkl7ckei.sw/#end-state","text":"The end-state represents the end of the flow. In the Embedded flow, there are two end-states: 'success' and 'cancel'. Each end-state is associated with a specific view (e.g., 'embeddedFlow/success' and 'embeddedFlow/cancel'). end-state id= success view= embeddedFlow/success / end-state id= cancel view= embeddedFlow/cancel / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"End-State"},{"location":"basic-concepts-of-hotels-in-booking-mvc.4l6kq2l6.sw/","text":"Hotels in the booking-mvc application refer to the entities that users can search for and book. They are represented in various forms across the application, such as in search results, booking details, and booking reviews. The 'hotelResults' id in the 'list.html' file is used to display a list of hotels that match the user's search criteria. This list is dynamically populated based on the user's input. Each hotel has associated details that can be viewed and booked by the user. These details are managed through various files in the 'hotels' directory, such as 'show.html' for displaying hotel details, and 'bookingsTable.html' for managing hotel bookings. Hotel Search The 'search.html' file provides the user interface for searching hotels. It includes a form for entering search criteria and a section for displaying the search results. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org lang= en head th:replace= layouts/standard.html :: //head !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- !-- This head section is only used for static prototyping purposes. -- !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- title Spring Travel: Spring MVC and Web Flow Reference Application /title meta http-equiv= Content-Type content= text/html; charset=UTF-8 / link rel= stylesheet type= text/css media= screen, projection href= ../../styles/blueprint/screen.css / link rel= stylesheet type= text/css media= print href= ../../styles/blueprint/print.css / !--[if lt IE 8] Hotel Details The 'show.html' file displays the details of a selected hotel. It includes the hotel's name, address, and nightly rate, and provides an option to book the hotel. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org xmlns:tiles= http://www.thymeleaf.org xmlns:sec= http://www.thymeleaf.org lang= en head th:replace= layouts/standard.html :: //head !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- !-- This head section is only used for static prototyping purposes. -- !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- title Spring Travel: Spring MVC and Web Flow Reference Application /title meta http-equiv= Content-Type content= text/html; charset=UTF-8 / link rel= stylesheet type= text/css media= screen, projection href= ../../styles/blueprint/screen.css / link rel= stylesheet type= text/css media= print href= ../../styles/blueprint/print.css / Hotel Booking The 'booking-flow.xml' file defines the flow of the hotel booking process. It specifies the sequence of pages, starting from entering booking details to reviewing the booking. view-state id= enterBookingDetails model= booking view= /hotels/booking/enterBookingDetails.html binder binding property= checkinDate / Hotel Bookings Review The 'bookingsTable.html' file displays a table of the current hotel bookings. It includes details such as the hotel name, address, check-in and check-out dates, and a cancellation option. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org xmlns:sec= http://www.thymeleaf.org lang= en head th:replace= layouts/standard.html :: //head !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- !-- This head section is only used for static prototyping purposes. -- !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- title Spring Travel: Spring MVC and Web Flow Reference Application /title meta http-equiv= Content-Type content= text/html; charset=UTF-8 / link rel= stylesheet type= text/css media= screen, projection href= ../../styles/blueprint/screen.css / link rel= stylesheet type= text/css media= print href= ../../styles/blueprint/print.css / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Basic Concepts of Hotels in Booking-MVC"},{"location":"basic-concepts-of-hotels-in-booking-mvc.4l6kq2l6.sw/#hotel-search","text":"The 'search.html' file provides the user interface for searching hotels. It includes a form for entering search criteria and a section for displaying the search results. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org lang= en head th:replace= layouts/standard.html :: //head !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- !-- This head section is only used for static prototyping purposes. -- !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- title Spring Travel: Spring MVC and Web Flow Reference Application /title meta http-equiv= Content-Type content= text/html; charset=UTF-8 / link rel= stylesheet type= text/css media= screen, projection href= ../../styles/blueprint/screen.css / link rel= stylesheet type= text/css media= print href= ../../styles/blueprint/print.css / !--[if lt IE 8]","title":"Hotel Search"},{"location":"basic-concepts-of-hotels-in-booking-mvc.4l6kq2l6.sw/#hotel-details","text":"The 'show.html' file displays the details of a selected hotel. It includes the hotel's name, address, and nightly rate, and provides an option to book the hotel. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org xmlns:tiles= http://www.thymeleaf.org xmlns:sec= http://www.thymeleaf.org lang= en head th:replace= layouts/standard.html :: //head !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- !-- This head section is only used for static prototyping purposes. -- !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- title Spring Travel: Spring MVC and Web Flow Reference Application /title meta http-equiv= Content-Type content= text/html; charset=UTF-8 / link rel= stylesheet type= text/css media= screen, projection href= ../../styles/blueprint/screen.css / link rel= stylesheet type= text/css media= print href= ../../styles/blueprint/print.css /","title":"Hotel Details"},{"location":"basic-concepts-of-hotels-in-booking-mvc.4l6kq2l6.sw/#hotel-booking","text":"The 'booking-flow.xml' file defines the flow of the hotel booking process. It specifies the sequence of pages, starting from entering booking details to reviewing the booking. view-state id= enterBookingDetails model= booking view= /hotels/booking/enterBookingDetails.html binder binding property= checkinDate /","title":"Hotel Booking"},{"location":"basic-concepts-of-hotels-in-booking-mvc.4l6kq2l6.sw/#hotel-bookings-review","text":"The 'bookingsTable.html' file displays a table of the current hotel bookings. It includes details such as the hotel name, address, check-in and check-out dates, and a cancellation option. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org xmlns:sec= http://www.thymeleaf.org lang= en head th:replace= layouts/standard.html :: //head !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- !-- This head section is only used for static prototyping purposes. -- !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- title Spring Travel: Spring MVC and Web Flow Reference Application /title meta http-equiv= Content-Type content= text/html; charset=UTF-8 / link rel= stylesheet type= text/css media= screen, projection href= ../../styles/blueprint/screen.css / link rel= stylesheet type= text/css media= print href= ../../styles/blueprint/print.css / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Hotel Bookings Review"},{"location":"basic-concepts-of-styles-in-spring-web-flow-samples.c17cne6d.sw/","text":"Styles in the spring-webflow-samples project refer to the CSS rules defined in the styles directory. These rules are used to control the appearance of the web pages in the project. For example, there are selectors like 'del' and 'ul', and classes like '.loud' defined in the typography.css file. These styles are applied to the corresponding HTML elements to control their visual presentation. Blueprint CSS Framework This file is part of the Blueprint CSS framework, which is a design tool for creating flexible grid layouts. It includes styles for typography, forms, and a grid system. /* ----------------------------------------------------------------------- Blueprint CSS Framework 0.9 http://blueprintcss.org * Copyright (c) 2007-Present. See LICENSE for more info. * See README for instructions on how to use Blueprint. * For credits and origins, see AUTHORS. * This is a compressed file. See the sources in the 'src' directory. ----------------------------------------------------------------------- */ /* reset.css */ html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, code, del, dfn, em, img, q, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td {margin:0;padding:0;border:0;font-weight:inherit;font-style:inherit;font-size:100%;font-family:inherit;vertical-align:baseline;} body {line-height:1.5;} table {border-collapse:separate;border-spacing:0;} caption, th, td {text-align:left;font-weight:normal;} table, td, th {vertical-align:middle;} blockquote:before, blockquote:after, q:before, q:after {content: ;} blockquote, q {quotes: ;} Internet Explorer Specific Styles This file contains styles specifically for Internet Explorer. It includes various hacks to ensure that the web application displays correctly in this browser. /* -------------------------------------------------------------- ie.css Contains every hack for Internet Explorer, so that our core files stay sweet and nimble. -------------------------------------------------------------- */ /* Make sure the layout is centered in IE5 */ body { text-align: center; } .container { text-align: left; } /* Fixes IE margin bugs */ * html .column, * html div.span-1, * html div.span-2, * html div.span-3, * html div.span-4, * html div.span-5, * html div.span-6, * html div.span-7, * html div.span-8, * html div.span-9, * html div.span-10, * html div.span-11, * html div.span-12, * html div.span-13, * html div.span-14, * html div.span-15, * html div.span-16, * html div.span-17, * html div.span-18, * html div.span-19, * html div.span-20, Fancy Type Plugin This file is part of the Fancy Type plugin for the Blueprint CSS framework. It provides advanced classes for manipulating text, such as indentation, reduced size type, and uppercase words. /* -------------------------------------------------------------- fancy-type.css * Lots of pretty advanced classes for manipulating text. See the Readme file in this folder for additional instructions. -------------------------------------------------------------- */ /* Indentation instead of line shifts for sibling paragraphs. */ p + p { text-indent:2em; margin-top:-1.5em; } form p + p { text-indent: 0; } /* Don't want this in forms. */ /* For great looking type, use this code instead of asdf: span class= alt asdf /span Best used on prepositions and ampersands. */ .alt { color: #666; font-family: Warnock Pro , Goudy Old Style , Palatino , Book Antiqua , Georgia, serif; Buttons Plugin This file is part of the Buttons plugin for the Blueprint CSS framework. It provides styles for creating CSS-only buttons. /* -------------------------------------------------------------- buttons.css * Gives you some great CSS-only buttons. Created by Kevin Hale [particletree.com] * particletree.com/features/rediscovering-the-button-element See Readme.txt in this folder for instructions. -------------------------------------------------------------- */ a.button, button { display:block; float:left; margin: 0.7em 0.5em 0.7em 0; padding:5px 10px 5px 7px; /* Links */ border:1px solid #dedede; border-top:1px solid #eee; border-left:1px solid #eee; Right-to-Left Language Support This file provides styles for supporting right-to-left languages. It mirrors the Blueprint CSS framework to accommodate languages that are read from right to left. /* -------------------------------------------------------------- rtl.css * Mirrors Blueprint for left-to-right languages By Ran Yaniv Hartstein [ranh.co.il] -------------------------------------------------------------- */ body .container { direction: rtl; } body .column, body div.span-1, body div.span-2, body div.span-3, body div.span-4, body div.span-5, body div.span-6, body div.span-7, body div.span-8, body div.span-9, body div.span-10, body div.span-11, body div.span-12, body div.span-13, body div.span-14, body div.span-15, body div.span-16, body div.span-17, body div.span-18, body div.span-19, body div.span-20, body div.span-21, body div.span-22, body div.span-23, body div.span-24 { float: right; margin-right: 0; margin-left: 10px; text-align:right; } body div.last { margin-left: 0; } body table .last { padding-left: 0; } body .append-1 { padding-right: 0; padding-left: 40px; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Basic Concepts of Styles in Spring Web Flow Samples"},{"location":"basic-concepts-of-styles-in-spring-web-flow-samples.c17cne6d.sw/#blueprint-css-framework","text":"This file is part of the Blueprint CSS framework, which is a design tool for creating flexible grid layouts. It includes styles for typography, forms, and a grid system. /* ----------------------------------------------------------------------- Blueprint CSS Framework 0.9 http://blueprintcss.org * Copyright (c) 2007-Present. See LICENSE for more info. * See README for instructions on how to use Blueprint. * For credits and origins, see AUTHORS. * This is a compressed file. See the sources in the 'src' directory. ----------------------------------------------------------------------- */ /* reset.css */ html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, code, del, dfn, em, img, q, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td {margin:0;padding:0;border:0;font-weight:inherit;font-style:inherit;font-size:100%;font-family:inherit;vertical-align:baseline;} body {line-height:1.5;} table {border-collapse:separate;border-spacing:0;} caption, th, td {text-align:left;font-weight:normal;} table, td, th {vertical-align:middle;} blockquote:before, blockquote:after, q:before, q:after {content: ;} blockquote, q {quotes: ;}","title":"Blueprint CSS Framework"},{"location":"basic-concepts-of-styles-in-spring-web-flow-samples.c17cne6d.sw/#internet-explorer-specific-styles","text":"This file contains styles specifically for Internet Explorer. It includes various hacks to ensure that the web application displays correctly in this browser. /* -------------------------------------------------------------- ie.css Contains every hack for Internet Explorer, so that our core files stay sweet and nimble. -------------------------------------------------------------- */ /* Make sure the layout is centered in IE5 */ body { text-align: center; } .container { text-align: left; } /* Fixes IE margin bugs */ * html .column, * html div.span-1, * html div.span-2, * html div.span-3, * html div.span-4, * html div.span-5, * html div.span-6, * html div.span-7, * html div.span-8, * html div.span-9, * html div.span-10, * html div.span-11, * html div.span-12, * html div.span-13, * html div.span-14, * html div.span-15, * html div.span-16, * html div.span-17, * html div.span-18, * html div.span-19, * html div.span-20,","title":"Internet Explorer Specific Styles"},{"location":"basic-concepts-of-styles-in-spring-web-flow-samples.c17cne6d.sw/#fancy-type-plugin","text":"This file is part of the Fancy Type plugin for the Blueprint CSS framework. It provides advanced classes for manipulating text, such as indentation, reduced size type, and uppercase words. /* -------------------------------------------------------------- fancy-type.css * Lots of pretty advanced classes for manipulating text. See the Readme file in this folder for additional instructions. -------------------------------------------------------------- */ /* Indentation instead of line shifts for sibling paragraphs. */ p + p { text-indent:2em; margin-top:-1.5em; } form p + p { text-indent: 0; } /* Don't want this in forms. */ /* For great looking type, use this code instead of asdf: span class= alt asdf /span Best used on prepositions and ampersands. */ .alt { color: #666; font-family: Warnock Pro , Goudy Old Style , Palatino , Book Antiqua , Georgia, serif;","title":"Fancy Type Plugin"},{"location":"basic-concepts-of-styles-in-spring-web-flow-samples.c17cne6d.sw/#buttons-plugin","text":"This file is part of the Buttons plugin for the Blueprint CSS framework. It provides styles for creating CSS-only buttons. /* -------------------------------------------------------------- buttons.css * Gives you some great CSS-only buttons. Created by Kevin Hale [particletree.com] * particletree.com/features/rediscovering-the-button-element See Readme.txt in this folder for instructions. -------------------------------------------------------------- */ a.button, button { display:block; float:left; margin: 0.7em 0.5em 0.7em 0; padding:5px 10px 5px 7px; /* Links */ border:1px solid #dedede; border-top:1px solid #eee; border-left:1px solid #eee;","title":"Buttons Plugin"},{"location":"basic-concepts-of-styles-in-spring-web-flow-samples.c17cne6d.sw/#right-to-left-language-support","text":"This file provides styles for supporting right-to-left languages. It mirrors the Blueprint CSS framework to accommodate languages that are read from right to left. /* -------------------------------------------------------------- rtl.css * Mirrors Blueprint for left-to-right languages By Ran Yaniv Hartstein [ranh.co.il] -------------------------------------------------------------- */ body .container { direction: rtl; } body .column, body div.span-1, body div.span-2, body div.span-3, body div.span-4, body div.span-5, body div.span-6, body div.span-7, body div.span-8, body div.span-9, body div.span-10, body div.span-11, body div.span-12, body div.span-13, body div.span-14, body div.span-15, body div.span-16, body div.span-17, body div.span-18, body div.span-19, body div.span-20, body div.span-21, body div.span-22, body div.span-23, body div.span-24 { float: right; margin-right: 0; margin-left: 10px; text-align:right; } body div.last { margin-left: 0; } body table .last { padding-left: 0; } body .append-1 { padding-right: 0; padding-left: 40px; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Right-to-Left Language Support"},{"location":"basic-concepts-of-web-inf.dmlciih0.sw/","text":"The WEB-INF directory in a Java web application is a location for resources such as configuration files, JSP files, and libraries. It is a secure directory because its contents are not directly accessible from the browser. In the webflow-showcase application, the WEB-INF directory contains the web.xml file, which is the deployment descriptor for the application. It configures the DispatcherServlet that handles incoming requests. The WEB-INF directory also contains subdirectories for layouts, views, flows, and Spring configuration. The layouts directory contains JSP files that define the layout for the application. The views directory contains JSP files for individual views. The flows directory contains Spring Web Flow definitions. The spring directory contains Spring configuration files. These files define beans and other components for the application context. 'web.xml' File The 'web.xml' file is the deployment descriptor of the application. It defines the servlet mapping for the 'DispatcherServlet', which is the entry point for handling requests in Spring MVC applications. web-app xmlns= http://java.sun.com/xml/ns/javaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd version= 3.0 servlet servlet-name DispatcherServlet /servlet-name servlet-class org.springframework.web.servlet.DispatcherServlet /servlet-class init-param param-name contextConfigLocation /param-name param-value /WEB-INF/spring/servlet-context.xml /param-value /init-param load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name DispatcherServlet /servlet-name url-pattern / /url-pattern /servlet-mapping /web-app Spring Configuration Files The 'servlet-context.xml' file is one of the Spring configuration files. It is specified as the 'contextConfigLocation' parameter in the 'web.xml' file. This file typically contains beans definitions that are specific to the web layer of the application. xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd !-- Flow Definitions The 'flow.xml' files define the flows for the Spring Web Flow. Each flow is a module of the application that encapsulates a sequence of steps that guide the user through a controlled navigation. xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd view-state id= step1 view= embeddedFlow/step1 JSP View Templates The JSP files in the 'views' directory are the view templates of the application. They define the presentation of the data that is sent to the client. ```java server pages --- /SwmSnippet # Spring Web Flow Endpoints Understanding Spring Web Flow Endpoints SwmSnippet path= /webflow-showcase/src/main/webapp/WEB-INF/spring/controllers.xml line= 15 --- ## Root Endpoint (/) The root endpoint (/) is mapped to the 'home' view. This means when a user navigates to the base URL of the application, they are served the 'home' view. ```xml mvc:view-controller path= / view-name= home / /embeddedFlowContainer Endpoint The /embeddedFlowContainer endpoint is not mapped to a specific view. This suggests that the endpoint is handled by a controller method, which would determine the appropriate view to return. mvc:view-controller path= /embeddedFlowContainer / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Basic Concepts of WEB-INF"},{"location":"basic-concepts-of-web-inf.dmlciih0.sw/#webxml-file","text":"The 'web.xml' file is the deployment descriptor of the application. It defines the servlet mapping for the 'DispatcherServlet', which is the entry point for handling requests in Spring MVC applications. web-app xmlns= http://java.sun.com/xml/ns/javaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd version= 3.0 servlet servlet-name DispatcherServlet /servlet-name servlet-class org.springframework.web.servlet.DispatcherServlet /servlet-class init-param param-name contextConfigLocation /param-name param-value /WEB-INF/spring/servlet-context.xml /param-value /init-param load-on-startup 1 /load-on-startup /servlet servlet-mapping servlet-name DispatcherServlet /servlet-name url-pattern / /url-pattern /servlet-mapping /web-app","title":"'web.xml' File"},{"location":"basic-concepts-of-web-inf.dmlciih0.sw/#spring-configuration-files","text":"The 'servlet-context.xml' file is one of the Spring configuration files. It is specified as the 'contextConfigLocation' parameter in the 'web.xml' file. This file typically contains beans definitions that are specific to the web layer of the application. xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd !--","title":"Spring Configuration Files"},{"location":"basic-concepts-of-web-inf.dmlciih0.sw/#flow-definitions","text":"The 'flow.xml' files define the flows for the Spring Web Flow. Each flow is a module of the application that encapsulates a sequence of steps that guide the user through a controlled navigation. xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd view-state id= step1 view= embeddedFlow/step1","title":"Flow Definitions"},{"location":"basic-concepts-of-web-inf.dmlciih0.sw/#jsp-view-templates","text":"The JSP files in the 'views' directory are the view templates of the application. They define the presentation of the data that is sent to the client. ```java server pages --- /SwmSnippet # Spring Web Flow Endpoints Understanding Spring Web Flow Endpoints SwmSnippet path= /webflow-showcase/src/main/webapp/WEB-INF/spring/controllers.xml line= 15 --- ## Root Endpoint (/) The root endpoint (/) is mapped to the 'home' view. This means when a user navigates to the base URL of the application, they are served the 'home' view. ```xml mvc:view-controller path= / view-name= home /","title":"JSP View Templates"},{"location":"basic-concepts-of-web-inf.dmlciih0.sw/#embeddedflowcontainer-endpoint","text":"The /embeddedFlowContainer endpoint is not mapped to a specific view. This suggests that the endpoint is handled by a controller method, which would determine the appropriate view to return. mvc:view-controller path= /embeddedFlowContainer / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"/embeddedFlowContainer Endpoint"},{"location":"booking-flow-process.ufa0pqqh.sw/","text":"This document will cover the process of starting a booking flow in the Spring Web Flow project. The process includes: Initiating the booking flow Creating a test booking Setting the ID for the booking. graph TD; subgraph booking-faces/src testStartBookingFlow:::mainFlowStyle -- createTestBooking end subgraph booking-faces/src createTestBooking:::mainFlowStyle -- setId end setId:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 Initiating the Booking Flow The function testStartBookingFlow initiates the booking flow. It's the entry point for the process. package org.springframework.webflow.samples.booking; Creating a Test Booking The function createTestBooking is called by testStartBookingFlow . It creates a new booking instance with a hotel and a user. The hotel ID is set to 1 and the user is predefined. private Booking createTestBooking() { Hotel hotel = new Hotel(); hotel.setId(1L); hotel.setName( Jameson Inn ); User user = new User( keith , pass , Keith Donald ); Booking booking = new Booking(hotel, user); return booking; } Setting the ID for the Booking The function setId is called by createTestBooking . It sets the ID for the booking instance. public void setId(Long id) { this.id = id; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Booking Flow Process"},{"location":"booking-flow-process.ufa0pqqh.sw/#initiating-the-booking-flow","text":"The function testStartBookingFlow initiates the booking flow. It's the entry point for the process. package org.springframework.webflow.samples.booking;","title":"Initiating the Booking Flow"},{"location":"booking-flow-process.ufa0pqqh.sw/#creating-a-test-booking","text":"The function createTestBooking is called by testStartBookingFlow . It creates a new booking instance with a hotel and a user. The hotel ID is set to 1 and the user is predefined. private Booking createTestBooking() { Hotel hotel = new Hotel(); hotel.setId(1L); hotel.setName( Jameson Inn ); User user = new User( keith , pass , Keith Donald ); Booking booking = new Booking(hotel, user); return booking; }","title":"Creating a Test Booking"},{"location":"booking-flow-process.ufa0pqqh.sw/#setting-the-id-for-the-booking","text":"The function setId is called by createTestBooking . It sets the ID for the booking instance. public void setId(Long id) { this.id = id; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Setting the ID for the Booking"},{"location":"booking-validation-process.9yd5taqz.sw/","text":"This document will cover the process of validating booking details in the Spring Web Flow samples project. The process includes: The function validateEnterBookingDetails and its role in the process. The function today and how it contributes to the validation process. The function getTime and its role in obtaining the current time. graph TD; validateEnterBookingDetails:::mainFlowStyle -- today today:::mainFlowStyle -- getTime getTime:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 The function validateEnterBookingDetails The function validateEnterBookingDetails is the starting point of the booking validation process. It's responsible for initiating the validation of the entered booking details. package org.springframework.webflow.samples.booking; The function today The function today is called within validateEnterBookingDetails . It retrieves the current date, subtracts one day from it, and returns the result. This is used in the context of booking validation to ensure that the booking date is not in the past. private Date today() { Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.DAY_OF_MONTH, -1); return calendar.getTime(); } The function getTime The function getTime is called within today . It simply returns the current date and time. This is used in the today function to get the current date before subtracting one day. public Date getTime() { return new Date(); } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Booking Validation Process"},{"location":"booking-validation-process.9yd5taqz.sw/#the-function-validateenterbookingdetails","text":"The function validateEnterBookingDetails is the starting point of the booking validation process. It's responsible for initiating the validation of the entered booking details. package org.springframework.webflow.samples.booking;","title":"The function validateEnterBookingDetails"},{"location":"booking-validation-process.9yd5taqz.sw/#the-function-today","text":"The function today is called within validateEnterBookingDetails . It retrieves the current date, subtracts one day from it, and returns the result. This is used in the context of booking validation to ensure that the booking date is not in the past. private Date today() { Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.DAY_OF_MONTH, -1); return calendar.getTime(); }","title":"The function today"},{"location":"booking-validation-process.9yd5taqz.sw/#the-function-gettime","text":"The function getTime is called within today . It simply returns the current date and time. This is used in the today function to get the current date before subtracting one day. public Date getTime() { return new Date(); } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"The function getTime"},{"location":"bookingservice-interface-overview.rpg0j.sw/","text":"This document will cover the BookingService interface in the spring-webflow-samples repository. We will cover: What the BookingService interface is and its purpose. The variables and functions defined in BookingService . An example of how to use BookingService in JpaBookingService . graph TD; BookingService:::currentBaseStyle BookingService -- JpaBookingService classDef currentBaseStyle color:#000000,fill:#7CB9F4 What is BookingService BookingService is an interface in the spring-webflow-samples repository. It is used for retrieving hotels and bookings from a backing repository and also supports the ability to cancel a booking. Variables and functions The function findBookings is used to find bookings made by a given user. It takes a username as a parameter and returns a list of bookings made by that user. List Booking findBookings(String username); The function findHotels is used to find hotels available for booking by some criteria. It takes a SearchCriteria object as a parameter and returns a list of hotels meeting the criteria. List Hotel findHotels(SearchCriteria criteria); The function findHotelById is used to find a hotel by its identifier. It takes a hotel id as a parameter and returns the corresponding hotel. Hotel findHotelById(Long id); The function createBooking is used to create a new, transient hotel booking instance for the given user. It takes a hotel id and a username as parameters and returns the new transient booking instance. Booking createBooking(Long hotelId, String userName); The function persistBooking is used to persist the booking to the database. It takes a Booking object as a parameter. void persistBooking(Booking booking); The function cancelBooking is used to cancel an existing booking. It takes a booking id as a parameter. void cancelBooking(Long id); Usage example JpaBookingService is an example of how to use BookingService . It implements BookingService and provides the implementation for all the functions defined in BookingService . It uses a JPA entity manager to issue data access calls against the backing repository. @Service( bookingService ) @Repository public class JpaBookingService implements BookingService { private EntityManager em; @PersistenceContext public void setEntityManager(EntityManager em) { this.em = em; } @Transactional(readOnly = true) @SuppressWarnings( unchecked ) public List Booking findBookings(String username) { if (username != null) { return em.createQuery( select b from Booking b where b.user.username = :username order by b.checkinDate ) .setParameter( username , username).getResultList(); } else { return null; } } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"BookingService Interface in Booking mvc"},{"location":"bookingservice-interface-overview.rpg0j.sw/#what-is-bookingservice","text":"BookingService is an interface in the spring-webflow-samples repository. It is used for retrieving hotels and bookings from a backing repository and also supports the ability to cancel a booking.","title":"What is BookingService"},{"location":"bookingservice-interface-overview.rpg0j.sw/#variables-and-functions","text":"The function findBookings is used to find bookings made by a given user. It takes a username as a parameter and returns a list of bookings made by that user. List Booking findBookings(String username); The function findHotels is used to find hotels available for booking by some criteria. It takes a SearchCriteria object as a parameter and returns a list of hotels meeting the criteria. List Hotel findHotels(SearchCriteria criteria); The function findHotelById is used to find a hotel by its identifier. It takes a hotel id as a parameter and returns the corresponding hotel. Hotel findHotelById(Long id); The function createBooking is used to create a new, transient hotel booking instance for the given user. It takes a hotel id and a username as parameters and returns the new transient booking instance. Booking createBooking(Long hotelId, String userName); The function persistBooking is used to persist the booking to the database. It takes a Booking object as a parameter. void persistBooking(Booking booking); The function cancelBooking is used to cancel an existing booking. It takes a booking id as a parameter. void cancelBooking(Long id);","title":"Variables and functions"},{"location":"bookingservice-interface-overview.rpg0j.sw/#usage-example","text":"JpaBookingService is an example of how to use BookingService . It implements BookingService and provides the implementation for all the functions defined in BookingService . It uses a JPA entity manager to issue data access calls against the backing repository. @Service( bookingService ) @Repository public class JpaBookingService implements BookingService { private EntityManager em; @PersistenceContext public void setEntityManager(EntityManager em) { this.em = em; } @Transactional(readOnly = true) @SuppressWarnings( unchecked ) public List Booking findBookings(String username) { if (username != null) { return em.createQuery( select b from Booking b where b.user.username = :username order by b.checkinDate ) .setParameter( username , username).getResultList(); } else { return null; } } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Usage example"},{"location":"building-the-primefaces-showcase-with-maven.rcjywjxg.sw/","text":"This document provides a detailed walkthrough of how Maven is used in the PrimeFaces Showcase project, focusing on the configuration and dependencies defined in the pom.xml file. Project Information The pom.xml file starts with the project information. The modelVersion is set to 4.0.0 , which is the standard for Maven 2 and later. The groupId is org.springframework.webflow.samples , and the artifactId is primefaces-showcase . The packaging type is war , indicating that the project will be packaged as a Web Application Archive (WAR) file. ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId primefaces-showcase /artifactId name Spring Web Flow and PrimeFaces Showcase /name packaging war /packaging version 1.0.0-BUILD-SNAPSHOT /version Parent Project The parent element specifies the parent project from which this project inherits. The parent project is spring-webflow-samples from the org.springframework.webflow group. parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent Dependencies The dependencies section lists all the dependencies required by the project. These include various Spring, Servlet, JSF, PrimeFaces, and logging libraries. Each dependency is specified with a groupId , artifactId , and version . dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-binding /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-webflow /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-faces /artifactId version ${webflow.version} /version /dependency Build Configuration The build section configures aspects related to the build process. The finalName is set to primefaces-showcase , which will be the name of the generated WAR file. The plugins section includes the maven-compiler-plugin for compiling the source code and the jetty-maven-plugin for running the application on Jetty server. build finalName primefaces-showcase /finalName plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.7.0 /version configuration source 1.8 /source target 1.8 /target /configuration /plugin plugin groupId org.eclipse.jetty /groupId artifactId jetty-maven-plugin /artifactId version ${jetty-maven-plugin.version} /version configuration webApp contextPath /${project.artifactId} /contextPath /webApp /configuration This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Building the PrimeFaces Showcase with Maven"},{"location":"building-the-primefaces-showcase-with-maven.rcjywjxg.sw/#project-information","text":"The pom.xml file starts with the project information. The modelVersion is set to 4.0.0 , which is the standard for Maven 2 and later. The groupId is org.springframework.webflow.samples , and the artifactId is primefaces-showcase . The packaging type is war , indicating that the project will be packaged as a Web Application Archive (WAR) file. ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId primefaces-showcase /artifactId name Spring Web Flow and PrimeFaces Showcase /name packaging war /packaging version 1.0.0-BUILD-SNAPSHOT /version","title":"Project Information"},{"location":"building-the-primefaces-showcase-with-maven.rcjywjxg.sw/#parent-project","text":"The parent element specifies the parent project from which this project inherits. The parent project is spring-webflow-samples from the org.springframework.webflow group. parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent","title":"Parent Project"},{"location":"building-the-primefaces-showcase-with-maven.rcjywjxg.sw/#dependencies","text":"The dependencies section lists all the dependencies required by the project. These include various Spring, Servlet, JSF, PrimeFaces, and logging libraries. Each dependency is specified with a groupId , artifactId , and version . dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-binding /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-webflow /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-faces /artifactId version ${webflow.version} /version /dependency","title":"Dependencies"},{"location":"building-the-primefaces-showcase-with-maven.rcjywjxg.sw/#build-configuration","text":"The build section configures aspects related to the build process. The finalName is set to primefaces-showcase , which will be the name of the generated WAR file. The plugins section includes the maven-compiler-plugin for compiling the source code and the jetty-maven-plugin for running the application on Jetty server. build finalName primefaces-showcase /finalName plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.7.0 /version configuration source 1.8 /source target 1.8 /target /configuration /plugin plugin groupId org.eclipse.jetty /groupId artifactId jetty-maven-plugin /artifactId version ${jetty-maven-plugin.version} /version configuration webApp contextPath /${project.artifactId} /contextPath /webApp /configuration This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Build Configuration"},{"location":"communication-between-jsf-components-and-the-server-side.4fissfjd.sw/","text":"This document will cover the process of how JSF components communicate with the server side in the Spring Web Flow application. The topics covered include: The role of JSF components in the application How JSF components interact with the server side The flow of data between JSF components and the server. Role of JSF components The FacesHelper class is a JSF component that is used to interact with the server side. It has a method isError which checks if there are any messages to display. This is an example of how JSF components can communicate with the server side. @Component public class FacesHelper { /** * This method can be used in a Facelets View to render a box around h:messages/ conditionally. * Note that this is only necessary with vanilla JSF. With PrimeFaces you can use p:messages/ * or p:growl . * * @return true if there are messages to display */ public boolean isError() { return FacesContext.getCurrentInstance().getMessages().hasNext(); } } Interaction with the server side The UserBean class is another example of a JSF component. It has a method createEmailSuggestion which interacts with the server side to create an email suggestion based on the user's first and last name. package org.springframework.samples.webflow.ajax; import java.io.Serializable; import org.springframework.binding.message.MessageBuilder; import org.springframework.util.StringUtils; import org.springframework.webflow.execution.RequestContext; public class UserBean implements Serializable { private static final long serialVersionUID = 1L; private String firstName; private String lastName; public String createEmailSuggestion(RequestContext context) { boolean haveFirst = StringUtils.hasText(firstName); boolean haveLast = StringUtils.hasLength(lastName); Data flow between JSF components and the server The onStartup method in the DispatcherServletInitializer class sets up the JSF environment. It sets various parameters for the JSF context, such as the default suffix for JSF view templates and the refresh period for Facelets. This is an example of how data flows from the server side to the JSF components. @Override public void onStartup(ServletContext servletContext) throws ServletException { // Use JSF view templates saved as *.xhtml, for use with Facelets servletContext.setInitParameter( jakarta.faces.DEFAULT_SUFFIX , .xhtml ); // Enable special Facelets debug output during development servletContext.setInitParameter( jakarta.faces.PROJECT_STAGE , Development ); // Causes Facelets to refresh templates during development servletContext.setInitParameter( jakarta.faces.FACELETS_REFRESH_PERIOD , 1 ); // Declare Spring Security Facelets tag library servletContext.setInitParameter( jakarta.faces.FACELETS_LIBRARIES , /WEB-INF/springsecurity.taglib.xml ); // Comment out if not using Mojarra servletContext.addListener(com.sun.faces.config.ConfigureListener.class); // Let the DispatcherServlet be registered super.onStartup(servletContext); } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Communication between JSF Components and the Server Side"},{"location":"communication-between-jsf-components-and-the-server-side.4fissfjd.sw/#role-of-jsf-components","text":"The FacesHelper class is a JSF component that is used to interact with the server side. It has a method isError which checks if there are any messages to display. This is an example of how JSF components can communicate with the server side. @Component public class FacesHelper { /** * This method can be used in a Facelets View to render a box around h:messages/ conditionally. * Note that this is only necessary with vanilla JSF. With PrimeFaces you can use p:messages/ * or p:growl . * * @return true if there are messages to display */ public boolean isError() { return FacesContext.getCurrentInstance().getMessages().hasNext(); } }","title":"Role of JSF components"},{"location":"communication-between-jsf-components-and-the-server-side.4fissfjd.sw/#interaction-with-the-server-side","text":"The UserBean class is another example of a JSF component. It has a method createEmailSuggestion which interacts with the server side to create an email suggestion based on the user's first and last name. package org.springframework.samples.webflow.ajax; import java.io.Serializable; import org.springframework.binding.message.MessageBuilder; import org.springframework.util.StringUtils; import org.springframework.webflow.execution.RequestContext; public class UserBean implements Serializable { private static final long serialVersionUID = 1L; private String firstName; private String lastName; public String createEmailSuggestion(RequestContext context) { boolean haveFirst = StringUtils.hasText(firstName); boolean haveLast = StringUtils.hasLength(lastName);","title":"Interaction with the server side"},{"location":"communication-between-jsf-components-and-the-server-side.4fissfjd.sw/#data-flow-between-jsf-components-and-the-server","text":"The onStartup method in the DispatcherServletInitializer class sets up the JSF environment. It sets various parameters for the JSF context, such as the default suffix for JSF view templates and the refresh period for Facelets. This is an example of how data flows from the server side to the JSF components. @Override public void onStartup(ServletContext servletContext) throws ServletException { // Use JSF view templates saved as *.xhtml, for use with Facelets servletContext.setInitParameter( jakarta.faces.DEFAULT_SUFFIX , .xhtml ); // Enable special Facelets debug output during development servletContext.setInitParameter( jakarta.faces.PROJECT_STAGE , Development ); // Causes Facelets to refresh templates during development servletContext.setInitParameter( jakarta.faces.FACELETS_REFRESH_PERIOD , 1 ); // Declare Spring Security Facelets tag library servletContext.setInitParameter( jakarta.faces.FACELETS_LIBRARIES , /WEB-INF/springsecurity.taglib.xml ); // Comment out if not using Mojarra servletContext.addListener(com.sun.faces.config.ConfigureListener.class); // Let the DispatcherServlet be registered super.onStartup(servletContext); } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Data flow between JSF components and the server"},{"location":"configuring-and-using-maven-in-the-spring-web-flow-samples-project.5y5v5pi4.sw/","text":"This document provides a detailed walkthrough of how Maven is configured and used in the Spring Web Flow Samples project. Project Information The pom.xml file starts with the project information. It specifies the model version, group ID, artifact ID, packaging type, name, and version of the project. ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId packaging pom /packaging name Spring Web Flow Samples /name version 1.0.0.BUILD-SNAPSHOT /version Modules The modules section lists the modules that make up the project. Each module corresponds to a sub-project. modules module booking-mvc /module module booking-faces /module module primefaces-showcase /module !-- module webflow-showcase /module -- /modules Properties The properties section defines versions of various dependencies and plugins used across the project. For example, the jetty-maven-plugin.version property is set to 11.0.11 . properties easymock.version 3.4 /easymock.version cdi-api 4.0.1 /cdi-api hsqldb.version 2.5.1 /hsqldb.version hibernate.version 5.6.15.Final /hibernate.version hibernate-validator.version 8.0.0.Final /hibernate-validator.version jaxb.version 2.2.3 /jaxb.version jetty-maven-plugin.version 11.0.11 /jetty-maven-plugin.version jsp-api.version 3.1.0 /jsp-api.version jstl-api 3.0.0 /jstl-api junit.version 4.13.2 /junit.version log4j.version 2.14.0 /log4j.version mojarra.version 4.0.2 /mojarra.version myfaces.version 4.0.0 /myfaces.version primefaces.version 11.0.0 /primefaces.version servlet.version 6.0.0 /servlet.version webflow.version 3.0.0 /webflow.version weld.version 5.0.0.Final /weld.version maven-surefire-plugin.version 2.22.2 /maven-surefire-plugin.version /properties Dependency Management The dependencyManagement section is used to provide a centralized place to define and manage the versions of dependencies. It helps to avoid specifying versions in the child POMs. dependencyManagement dependencies dependency groupId org.springframework /groupId artifactId spring-framework-bom /artifactId version 6.0.10 /version type pom /type scope import /scope /dependency dependency groupId org.springframework.security /groupId artifactId spring-security-bom /artifactId type pom /type scope import /scope version 6.0.2 /version /dependency dependency groupId org.slf4j /groupId artifactId slf4j-api /artifactId version 2.0.6 /version /dependency Repositories The repositories section is used to specify the repositories from where the project dependencies are to be downloaded. In this case, the Spring Snapshot Repository and Spring Milestone Repository are used. repositories repository id spring-snapshot /id name Spring Snapshot Repository /name url https://repo.spring.io/snapshot /url /repository repository id spring-milestone /id name Spring Milestone Repository /name url https://repo.spring.io/milestone /url /repository /repositories This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Configuring and Using Maven in the Spring Web Flow Samples Project"},{"location":"configuring-and-using-maven-in-the-spring-web-flow-samples-project.5y5v5pi4.sw/#project-information","text":"The pom.xml file starts with the project information. It specifies the model version, group ID, artifact ID, packaging type, name, and version of the project. ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId packaging pom /packaging name Spring Web Flow Samples /name version 1.0.0.BUILD-SNAPSHOT /version","title":"Project Information"},{"location":"configuring-and-using-maven-in-the-spring-web-flow-samples-project.5y5v5pi4.sw/#modules","text":"The modules section lists the modules that make up the project. Each module corresponds to a sub-project. modules module booking-mvc /module module booking-faces /module module primefaces-showcase /module !-- module webflow-showcase /module -- /modules","title":"Modules"},{"location":"configuring-and-using-maven-in-the-spring-web-flow-samples-project.5y5v5pi4.sw/#properties","text":"The properties section defines versions of various dependencies and plugins used across the project. For example, the jetty-maven-plugin.version property is set to 11.0.11 . properties easymock.version 3.4 /easymock.version cdi-api 4.0.1 /cdi-api hsqldb.version 2.5.1 /hsqldb.version hibernate.version 5.6.15.Final /hibernate.version hibernate-validator.version 8.0.0.Final /hibernate-validator.version jaxb.version 2.2.3 /jaxb.version jetty-maven-plugin.version 11.0.11 /jetty-maven-plugin.version jsp-api.version 3.1.0 /jsp-api.version jstl-api 3.0.0 /jstl-api junit.version 4.13.2 /junit.version log4j.version 2.14.0 /log4j.version mojarra.version 4.0.2 /mojarra.version myfaces.version 4.0.0 /myfaces.version primefaces.version 11.0.0 /primefaces.version servlet.version 6.0.0 /servlet.version webflow.version 3.0.0 /webflow.version weld.version 5.0.0.Final /weld.version maven-surefire-plugin.version 2.22.2 /maven-surefire-plugin.version /properties","title":"Properties"},{"location":"configuring-and-using-maven-in-the-spring-web-flow-samples-project.5y5v5pi4.sw/#dependency-management","text":"The dependencyManagement section is used to provide a centralized place to define and manage the versions of dependencies. It helps to avoid specifying versions in the child POMs. dependencyManagement dependencies dependency groupId org.springframework /groupId artifactId spring-framework-bom /artifactId version 6.0.10 /version type pom /type scope import /scope /dependency dependency groupId org.springframework.security /groupId artifactId spring-security-bom /artifactId type pom /type scope import /scope version 6.0.2 /version /dependency dependency groupId org.slf4j /groupId artifactId slf4j-api /artifactId version 2.0.6 /version /dependency","title":"Dependency Management"},{"location":"configuring-and-using-maven-in-the-spring-web-flow-samples-project.5y5v5pi4.sw/#repositories","text":"The repositories section is used to specify the repositories from where the project dependencies are to be downloaded. In this case, the Spring Snapshot Repository and Spring Milestone Repository are used. repositories repository id spring-snapshot /id name Spring Snapshot Repository /name url https://repo.spring.io/snapshot /url /repository repository id spring-milestone /id name Spring Milestone Repository /name url https://repo.spring.io/milestone /url /repository /repositories This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Repositories"},{"location":"configuring-spring-web-flow-in-booking-mvc.raittkod.sw/","text":"This document will cover the process of configuring the Spring Web Flow in the booking-mvc application, which includes: Defining the flow registry Setting up the flow builder services Creating the MVC view factory Configuring the Thymeleaf view resolver Setting up the template engine Defining the template resolver. graph TD; subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config flowHandlerMapping:::mainFlowStyle -- flowRegistry end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config flowRegistry:::mainFlowStyle -- flowBuilderServices end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config flowBuilderServices:::mainFlowStyle -- mvcViewFactoryCreator end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config mvcViewFactoryCreator:::mainFlowStyle -- thymeleafViewResolver end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config thymeleafViewResolver:::mainFlowStyle -- templateEngine end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config templateEngine:::mainFlowStyle -- templateResolver end templateResolver:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 Defining the flow registry The flowRegistry method defines the flow registry. It sets the base path and adds a flow location pattern, which is used to locate the XML files that define the flows. @Bean public FlowDefinitionRegistry flowRegistry() { return getFlowDefinitionRegistryBuilder(flowBuilderServices()) .setBasePath( /WEB-INF ) .addFlowLocationPattern( /**/*-flow.xml ).build(); } Setting up the flow builder services The flowBuilderServices method sets up the flow builder services. It sets the view factory creator and the validator, and enables the development mode. @Bean public FlowBuilderServices flowBuilderServices() { return getFlowBuilderServicesBuilder() .setViewFactoryCreator(mvcViewFactoryCreator()) .setValidator(validator()) .setDevelopmentMode(true) .build(); } Creating the MVC view factory The mvcViewFactoryCreator method creates the MVC view factory. It sets the view resolvers and enables the use of Spring bean binding. @Bean public MvcViewFactoryCreator mvcViewFactoryCreator() { MvcViewFactoryCreator factoryCreator = new MvcViewFactoryCreator(); factoryCreator.setViewResolvers(Collections.singletonList(this.webMvcConfig.thymeleafViewResolver())); factoryCreator.setUseSpringBeanBinding(true); return factoryCreator; } Configuring the Thymeleaf view resolver The thymeleafViewResolver method configures the Thymeleaf view resolver. It sets the view class and the template engine. @Bean public AjaxThymeleafViewResolver thymeleafViewResolver() { AjaxThymeleafViewResolver viewResolver = new AjaxThymeleafViewResolver(); viewResolver.setViewClass(FlowAjaxThymeleafView.class); viewResolver.setTemplateEngine(templateEngine()); return viewResolver; } Setting up the template engine The templateEngine method sets up the template engine. It sets the template resolver and adds additional dialects. @Bean public SpringTemplateEngine templateEngine(){ Set IDialect dialects = new LinkedHashSet (); dialects.add(new SpringSecurityDialect()); SpringTemplateEngine templateEngine = new SpringTemplateEngine(); templateEngine.setTemplateResolver(templateResolver()); templateEngine.setAdditionalDialects(dialects); return templateEngine; } Defining the template resolver The templateResolver method defines the template resolver. It sets the prefix, suffix, and template mode. @Bean public WebApplicationTemplateResolver templateResolver() { IWebApplication application = JakartaServletWebApplication.buildApplication(this.servletContext); WebApplicationTemplateResolver resolver = new WebApplicationTemplateResolver(application); resolver.setPrefix( /WEB-INF/ ); resolver.setSuffix( .html ); resolver.setTemplateMode( HTML5 ); return resolver; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Configuring Spring Web Flow in booking-mvc"},{"location":"configuring-spring-web-flow-in-booking-mvc.raittkod.sw/#defining-the-flow-registry","text":"The flowRegistry method defines the flow registry. It sets the base path and adds a flow location pattern, which is used to locate the XML files that define the flows. @Bean public FlowDefinitionRegistry flowRegistry() { return getFlowDefinitionRegistryBuilder(flowBuilderServices()) .setBasePath( /WEB-INF ) .addFlowLocationPattern( /**/*-flow.xml ).build(); }","title":"Defining the flow registry"},{"location":"configuring-spring-web-flow-in-booking-mvc.raittkod.sw/#setting-up-the-flow-builder-services","text":"The flowBuilderServices method sets up the flow builder services. It sets the view factory creator and the validator, and enables the development mode. @Bean public FlowBuilderServices flowBuilderServices() { return getFlowBuilderServicesBuilder() .setViewFactoryCreator(mvcViewFactoryCreator()) .setValidator(validator()) .setDevelopmentMode(true) .build(); }","title":"Setting up the flow builder services"},{"location":"configuring-spring-web-flow-in-booking-mvc.raittkod.sw/#creating-the-mvc-view-factory","text":"The mvcViewFactoryCreator method creates the MVC view factory. It sets the view resolvers and enables the use of Spring bean binding. @Bean public MvcViewFactoryCreator mvcViewFactoryCreator() { MvcViewFactoryCreator factoryCreator = new MvcViewFactoryCreator(); factoryCreator.setViewResolvers(Collections.singletonList(this.webMvcConfig.thymeleafViewResolver())); factoryCreator.setUseSpringBeanBinding(true); return factoryCreator; }","title":"Creating the MVC view factory"},{"location":"configuring-spring-web-flow-in-booking-mvc.raittkod.sw/#configuring-the-thymeleaf-view-resolver","text":"The thymeleafViewResolver method configures the Thymeleaf view resolver. It sets the view class and the template engine. @Bean public AjaxThymeleafViewResolver thymeleafViewResolver() { AjaxThymeleafViewResolver viewResolver = new AjaxThymeleafViewResolver(); viewResolver.setViewClass(FlowAjaxThymeleafView.class); viewResolver.setTemplateEngine(templateEngine()); return viewResolver; }","title":"Configuring the Thymeleaf view resolver"},{"location":"configuring-spring-web-flow-in-booking-mvc.raittkod.sw/#setting-up-the-template-engine","text":"The templateEngine method sets up the template engine. It sets the template resolver and adds additional dialects. @Bean public SpringTemplateEngine templateEngine(){ Set IDialect dialects = new LinkedHashSet (); dialects.add(new SpringSecurityDialect()); SpringTemplateEngine templateEngine = new SpringTemplateEngine(); templateEngine.setTemplateResolver(templateResolver()); templateEngine.setAdditionalDialects(dialects); return templateEngine; }","title":"Setting up the template engine"},{"location":"configuring-spring-web-flow-in-booking-mvc.raittkod.sw/#defining-the-template-resolver","text":"The templateResolver method defines the template resolver. It sets the prefix, suffix, and template mode. @Bean public WebApplicationTemplateResolver templateResolver() { IWebApplication application = JakartaServletWebApplication.buildApplication(this.servletContext); WebApplicationTemplateResolver resolver = new WebApplicationTemplateResolver(application); resolver.setPrefix( /WEB-INF/ ); resolver.setSuffix( .html ); resolver.setTemplateMode( HTML5 ); return resolver; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Defining the template resolver"},{"location":"examining-the-use-of-_spring_security_remember_me-in-views.86jpzt6z.sw/","text":"This document will cover the role and usage of _spring_security_remember_me in the Spring Web Flow samples. We'll cover: What is _spring_security_remember_me How _spring_security_remember_me is used in the codebase The functionality and purpose of _spring_security_remember_me What is _spring_security_remember_me _spring_security_remember_me is an input field in the login form of the application. It is a checkbox that allows users to stay authenticated for a longer period without needing to enter their credentials again. How _spring_security_remember_me is used in the codebase In the login form, _spring_security_remember_me is used as the name of a checkbox input. When this checkbox is selected by the user, it enables the remember-me functionality. input type= checkbox name= _spring_security_remember_me id= remember_me / label for= remember_me Don't ask for my password for two weeks: /label The functionality and purpose of _spring_security_remember_me The _spring_security_remember_me checkbox is part of the Spring Security framework's remember-me authentication feature. When a user checks this box during login, the application will remember the user's session and won't ask for credentials again for a certain period, usually two weeks. This is achieved by storing a remember-me cookie in the user's browser. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Examining the Use of _spring_security_remember_me in Views"},{"location":"examining-the-use-of-_spring_security_remember_me-in-views.86jpzt6z.sw/#what-is-_spring_security_remember_me","text":"_spring_security_remember_me is an input field in the login form of the application. It is a checkbox that allows users to stay authenticated for a longer period without needing to enter their credentials again.","title":"What is _spring_security_remember_me"},{"location":"examining-the-use-of-_spring_security_remember_me-in-views.86jpzt6z.sw/#how-_spring_security_remember_me-is-used-in-the-codebase","text":"In the login form, _spring_security_remember_me is used as the name of a checkbox input. When this checkbox is selected by the user, it enables the remember-me functionality. input type= checkbox name= _spring_security_remember_me id= remember_me / label for= remember_me Don't ask for my password for two weeks: /label","title":"How _spring_security_remember_me is used in the codebase"},{"location":"examining-the-use-of-_spring_security_remember_me-in-views.86jpzt6z.sw/#the-functionality-and-purpose-of-_spring_security_remember_me","text":"The _spring_security_remember_me checkbox is part of the Spring Security framework's remember-me authentication feature. When a user checks this box during login, the application will remember the user's session and won't ask for credentials again for a certain period, usually two weeks. This is achieved by storing a remember-me cookie in the user's browser. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"The functionality and purpose of _spring_security_remember_me"},{"location":"exploring-entities-in-the-booking-faces-module.na4qtb7a.sw/","text":"Entities in the spring-webflow-samples repository, specifically in the booking-faces module, are classes that represent the main objects or concepts in the application. They are typically annotated with @Entity, indicating that they are JPA entities and will be mapped to a database table. For instance, the User class represents a user who can book hotels, and the Hotel class represents a hotel where users may book stays. These entities are used throughout the application, in service classes, controllers, and views. User Entity The User entity represents a user of the application. It has fields for username, password, and name. It is annotated with @Entity, indicating that it is a JPA entity and should be mapped to a database table. package org.springframework.webflow.samples.booking; import java.io.Serializable; import jakarta.persistence.Entity; import jakarta.persistence.Id; import jakarta.persistence.Table; /** * A user who can book hotels. */ @Entity @Table(name = Customer ) public class User implements Serializable { private static final long serialVersionUID = -3652559447682574722L; private String username; private String password; Hotel Entity The Hotel entity represents a hotel in the application. It has fields for id, name, address, city, state, zip, country, and price. It is also annotated with @Entity. package org.springframework.webflow.samples.booking; import java.io.Serializable; import java.math.BigDecimal; import jakarta.persistence.Column; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.Id; /** * A hotel where users may book stays. */ @Entity public class Hotel implements Serializable { private static final long serialVersionUID = 4011346719502656269L; private Long id; private String name; Booking Entity The Booking entity represents a booking made by a user for a hotel. It has fields for id, user, hotel, checkinDate, checkoutDate, creditCard, creditCardName, creditCardExpiryMonth, creditCardExpiryYear, smoking, beds, and amenities. It is also annotated with @Entity. package org.springframework.webflow.samples.booking; import java.io.Serializable; import java.math.BigDecimal; import java.text.DateFormat; import java.util.Calendar; import java.util.Date; import jakarta.persistence.Basic; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import jakarta.persistence.Id; import jakarta.persistence.ManyToOne; import jakarta.persistence.Temporal; import jakarta.persistence.TemporalType; import jakarta.persistence.Transient; import jakarta.validation.constraints.Future; import jakarta.validation.constraints.NotNull; import jakarta.validation.constraints.Pattern; This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Exploring Entities in the Booking-Faces Module"},{"location":"exploring-entities-in-the-booking-faces-module.na4qtb7a.sw/#user-entity","text":"The User entity represents a user of the application. It has fields for username, password, and name. It is annotated with @Entity, indicating that it is a JPA entity and should be mapped to a database table. package org.springframework.webflow.samples.booking; import java.io.Serializable; import jakarta.persistence.Entity; import jakarta.persistence.Id; import jakarta.persistence.Table; /** * A user who can book hotels. */ @Entity @Table(name = Customer ) public class User implements Serializable { private static final long serialVersionUID = -3652559447682574722L; private String username; private String password;","title":"User Entity"},{"location":"exploring-entities-in-the-booking-faces-module.na4qtb7a.sw/#hotel-entity","text":"The Hotel entity represents a hotel in the application. It has fields for id, name, address, city, state, zip, country, and price. It is also annotated with @Entity. package org.springframework.webflow.samples.booking; import java.io.Serializable; import java.math.BigDecimal; import jakarta.persistence.Column; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.Id; /** * A hotel where users may book stays. */ @Entity public class Hotel implements Serializable { private static final long serialVersionUID = 4011346719502656269L; private Long id; private String name;","title":"Hotel Entity"},{"location":"exploring-entities-in-the-booking-faces-module.na4qtb7a.sw/#booking-entity","text":"The Booking entity represents a booking made by a user for a hotel. It has fields for id, user, hotel, checkinDate, checkoutDate, creditCard, creditCardName, creditCardExpiryMonth, creditCardExpiryYear, smoking, beds, and amenities. It is also annotated with @Entity. package org.springframework.webflow.samples.booking; import java.io.Serializable; import java.math.BigDecimal; import java.text.DateFormat; import java.util.Calendar; import java.util.Date; import jakarta.persistence.Basic; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import jakarta.persistence.Id; import jakarta.persistence.ManyToOne; import jakarta.persistence.Temporal; import jakarta.persistence.TemporalType; import jakarta.persistence.Transient; import jakarta.validation.constraints.Future; import jakarta.validation.constraints.NotNull; import jakarta.validation.constraints.Pattern; This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Booking Entity"},{"location":"exploring-plugins-in-webflow-showcase.bkha45gk.sw/","text":"Plugins in the webflow-showcase project refer to additional sets of CSS stylesheets that enhance the functionality and aesthetics of the web application. They are located in the 'styles/blueprint/plugins' directory. Each plugin has its own directory, such as 'fancy-type', 'buttons', 'rtl', and 'link-icons', each containing a 'screen.css' file and a 'readme.txt' file. The 'screen.css' file contains the actual CSS rules that implement the plugin's functionality, while the 'readme.txt' provides additional information about the plugin. Button Plugin The Button plugin provides styles for button elements. It includes different color schemes for different button states (hover, active), and for positive and negative actions. /* -------------------------------------------------------------- buttons.css * Gives you some great CSS-only buttons. Created by Kevin Hale [particletree.com] * particletree.com/features/rediscovering-the-button-element See Readme.txt in this folder for instructions. -------------------------------------------------------------- */ a.button, button { display:block; float:left; margin: 0.7em 0.5em 0.7em 0; padding:5px 10px 5px 7px; /* Links */ border:1px solid #dedede; border-top:1px solid #eee; border-left:1px solid #eee; RTL Plugin The RTL (Right-to-Left) plugin provides styles for supporting right-to-left languages. It mirrors the layout of the Blueprint grid system and adjusts the typography for right-to-left reading. /* -------------------------------------------------------------- rtl.css * Mirrors Blueprint for left-to-right languages By Ran Yaniv Hartstein [ranh.co.il] -------------------------------------------------------------- */ body .container { direction: rtl; } body .column, body div.span-1, body div.span-2, body div.span-3, body div.span-4, body div.span-5, body div.span-6, body div.span-7, body div.span-8, body div.span-9, body div.span-10, body div.span-11, body div.span-12, body div.span-13, body div.span-14, body div.span-15, body div.span-16, body div.span-17, body div.span-18, body div.span-19, body div.span-20, body div.span-21, body div.span-22, body div.span-23, body div.span-24 { float: right; margin-right: 0; margin-left: 10px; text-align:right; } body div.last { margin-left: 0; } body table .last { padding-left: 0; } body .append-1 { padding-right: 0; padding-left: 40px; } Link Icons Plugin The Link Icons plugin provides styles for adding icons to links based on their protocol or file type. For example, external links get an external link icon, email links get an email icon, and links to PDF files get a PDF icon. /* -------------------------------------------------------------- link-icons.css * Icons for links based on protocol or file type. See the Readme file in this folder for additional instructions. -------------------------------------------------------------- */ /* Use this class if a link gets an icon when it shouldn't. */ body a.noicon { background:transparent none !important; padding:0 !important; margin:0 !important; } /* Make sure the icons are not cut */ a[href^= http: ], a[href^= mailto: ], a[href^= http: ]:visited, a[href$= .pdf ], a[href$= .doc ], a[href$= .xls ], a[href$= .rss ], a[href$= .rdf ], a[href^= aim: ] { padding:2px 22px 2px 0; This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Exploring Plugins in Webflow Showcase"},{"location":"exploring-plugins-in-webflow-showcase.bkha45gk.sw/#button-plugin","text":"The Button plugin provides styles for button elements. It includes different color schemes for different button states (hover, active), and for positive and negative actions. /* -------------------------------------------------------------- buttons.css * Gives you some great CSS-only buttons. Created by Kevin Hale [particletree.com] * particletree.com/features/rediscovering-the-button-element See Readme.txt in this folder for instructions. -------------------------------------------------------------- */ a.button, button { display:block; float:left; margin: 0.7em 0.5em 0.7em 0; padding:5px 10px 5px 7px; /* Links */ border:1px solid #dedede; border-top:1px solid #eee; border-left:1px solid #eee;","title":"Button Plugin"},{"location":"exploring-plugins-in-webflow-showcase.bkha45gk.sw/#rtl-plugin","text":"The RTL (Right-to-Left) plugin provides styles for supporting right-to-left languages. It mirrors the layout of the Blueprint grid system and adjusts the typography for right-to-left reading. /* -------------------------------------------------------------- rtl.css * Mirrors Blueprint for left-to-right languages By Ran Yaniv Hartstein [ranh.co.il] -------------------------------------------------------------- */ body .container { direction: rtl; } body .column, body div.span-1, body div.span-2, body div.span-3, body div.span-4, body div.span-5, body div.span-6, body div.span-7, body div.span-8, body div.span-9, body div.span-10, body div.span-11, body div.span-12, body div.span-13, body div.span-14, body div.span-15, body div.span-16, body div.span-17, body div.span-18, body div.span-19, body div.span-20, body div.span-21, body div.span-22, body div.span-23, body div.span-24 { float: right; margin-right: 0; margin-left: 10px; text-align:right; } body div.last { margin-left: 0; } body table .last { padding-left: 0; } body .append-1 { padding-right: 0; padding-left: 40px; }","title":"RTL Plugin"},{"location":"exploring-plugins-in-webflow-showcase.bkha45gk.sw/#link-icons-plugin","text":"The Link Icons plugin provides styles for adding icons to links based on their protocol or file type. For example, external links get an external link icon, email links get an email icon, and links to PDF files get a PDF icon. /* -------------------------------------------------------------- link-icons.css * Icons for links based on protocol or file type. See the Readme file in this folder for additional instructions. -------------------------------------------------------------- */ /* Use this class if a link gets an icon when it shouldn't. */ body a.noicon { background:transparent none !important; padding:0 !important; margin:0 !important; } /* Make sure the icons are not cut */ a[href^= http: ], a[href^= mailto: ], a[href^= http: ]:visited, a[href$= .pdf ], a[href$= .doc ], a[href$= .xls ], a[href$= .rss ], a[href$= .rdf ], a[href^= aim: ] { padding:2px 22px 2px 0; This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Link Icons Plugin"},{"location":"exploring-the-booking-faces-sample-project.5k1hbdbz.sw/","text":"Booking Faces is a sample project in the Spring Web Flow samples repository. It is a web application that demonstrates the use of Spring Web Flow with JavaServer Faces (JSF). The application is a hotel booking system, where users can book rooms in hotels. The application uses various Spring technologies such as Spring MVC, Spring JDBC, and Spring ORM. It also uses other technologies such as Hibernate for ORM, Jakarta Servlet API, and PrimeFaces, a JSF component library. Maven Configuration for 'booking-faces' This is the Maven configuration file for the 'booking-faces' module. It defines the module's dependencies, build configuration, and other project-specific settings. For instance, it specifies dependencies on various Spring modules, JSF implementation, database and JPA libraries, logging, and testing frameworks. ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId booking-faces /artifactId packaging war /packaging name Hotel Booking : Spring Web Flow with JSF /name version 1.0.0.BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Exploring the Booking Faces Sample Project"},{"location":"exploring-the-booking-faces-sample-project.5k1hbdbz.sw/#maven-configuration-for-booking-faces","text":"This is the Maven configuration file for the 'booking-faces' module. It defines the module's dependencies, build configuration, and other project-specific settings. For instance, it specifies dependencies on various Spring modules, JSF implementation, database and JPA libraries, logging, and testing frameworks. ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId booking-faces /artifactId packaging war /packaging name Hotel Booking : Spring Web Flow with JSF /name version 1.0.0.BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Maven Configuration for 'booking-faces'"},{"location":"getting-started-with-booking-mvc.bb4p4t7i.sw/","text":"Booking MVC is a sub-project within the spring-webflow-samples repository. It's a Spring MVC application that demonstrates a typical booking scenario for a hotel. The application uses Spring Web Flow for the booking process and Spring MVC for search and display of hotel information. It also integrates with Spring Security for authentication and authorization, and Hibernate for persistence. Booking MVC Dependencies This section of the pom.xml file lists the dependencies required for the Booking MVC application. It includes Spring MVC, Spring JDBC, Spring ORM, Spring Web Flow, and other necessary libraries. dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-jdbc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-orm /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-webflow /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId Building Booking MVC This section of the pom.xml file defines the build configuration for the Booking MVC application. It specifies the final name of the build and the plugins used during the build process. build finalName booking-mvc /finalName plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-war-plugin /artifactId version 3.1.0 /version configuration failOnMissingWebXml false /failOnMissingWebXml /configuration /plugin plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.10.1 /version configuration source 17 /source target 17 /target /configuration /plugin plugin This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Getting Started with Booking MVC"},{"location":"getting-started-with-booking-mvc.bb4p4t7i.sw/#booking-mvc-dependencies","text":"This section of the pom.xml file lists the dependencies required for the Booking MVC application. It includes Spring MVC, Spring JDBC, Spring ORM, Spring Web Flow, and other necessary libraries. dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-jdbc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-orm /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-webflow /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId","title":"Booking MVC Dependencies"},{"location":"getting-started-with-booking-mvc.bb4p4t7i.sw/#building-booking-mvc","text":"This section of the pom.xml file defines the build configuration for the Booking MVC application. It specifies the final name of the build and the plugins used during the build process. build finalName booking-mvc /finalName plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-war-plugin /artifactId version 3.1.0 /version configuration failOnMissingWebXml false /failOnMissingWebXml /configuration /plugin plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.10.1 /version configuration source 17 /source target 17 /target /configuration /plugin plugin This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Building Booking MVC"},{"location":"getting-started-with-configuration-classes.0kj683u0.sw/","text":"The 'Config' in the booking-faces application refers to the configuration classes that set up the application's behavior. These classes are located in the 'config' package and include classes like 'DispatcherServletInitializer', 'SecurityConfig', 'AppConfig', and others. Each of these classes serves a specific purpose. For instance, 'DispatcherServletInitializer' sets up the DispatcherServlet, 'SecurityConfig' sets up the security aspects of the application, and 'AppConfig' is the main configuration class that imports other configuration classes. AppConfig The AppConfig class is the central configuration class that imports other configuration classes. It uses the '@Import' annotation to include DataAccessConfig , WebMvcConfig , and WebFlowConfig . package org.springframework.webflow.samples.booking.config; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; @Configuration @ComponentScan(basePackages= org.springframework.webflow.samples.booking ) @Import(value={ DataAccessConfig.class, WebMvcConfig.class, WebFlowConfig.class }) public class AppConfig { } WebMvcConfig The WebMvcConfig class configures the Spring MVC and integrates it with JSF and Spring Web Flow. It defines beans such as FlowHandlerMapping , FlowHandlerAdapter , and UrlBasedViewResolver . package org.springframework.webflow.samples.booking.config; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.faces.mvc.JsfView; import org.springframework.faces.webflow.JsfFlowHandlerAdapter; import org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter; import org.springframework.web.servlet.mvc.UrlFilenameViewController; import org.springframework.web.servlet.view.UrlBasedViewResolver; import org.springframework.webflow.mvc.servlet.FlowHandlerAdapter; import org.springframework.webflow.mvc.servlet.FlowHandlerMapping; @Configuration public class WebMvcConfig { @Autowired private WebFlowConfig webFlowConfig; @Bean WebFlowConfig The WebFlowConfig class configures the Spring Web Flow. It defines beans such as FlowExecutor , FlowDefinitionRegistry , and FlowBuilderServices . package org.springframework.webflow.samples.booking.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.faces.config.AbstractFacesFlowConfiguration; import org.springframework.faces.webflow.FlowFacesContextLifecycleListener; import org.springframework.webflow.definition.registry.FlowDefinitionRegistry; import org.springframework.webflow.engine.builder.support.FlowBuilderServices; import org.springframework.webflow.executor.FlowExecutor; import org.springframework.webflow.security.SecurityFlowExecutionListener; @Configuration public class WebFlowConfig extends AbstractFacesFlowConfiguration { @Bean public FlowExecutor flowExecutor() { return getFlowExecutorBuilder(flowRegistry()) .addFlowExecutionListener(new FlowFacesContextLifecycleListener()) .addFlowExecutionListener(new SecurityFlowExecutionListener()) .build(); } DataAccessConfig The DataAccessConfig class configures the data access layer of the application. It defines beans such as PlatformTransactionManager , LocalContainerEntityManagerFactoryBean , and DataSource . package org.springframework.webflow.samples.booking.config; import java.util.Collections; import jakarta.persistence.EntityManagerFactory; import javax.sql.DataSource; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.jdbc.datasource.DriverManagerDataSource; import org.springframework.orm.jpa.JpaTransactionManager; import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean; import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.annotation.EnableTransactionManagement; @Configuration @EnableTransactionManagement(proxyTargetClass=true) public class DataAccessConfig { @Bean SecurityConfig The SecurityConfig class configures the security settings of the application. It defines beans such as SecurityFilterChain and InMemoryUserDetailsManager . package org.springframework.webflow.samples.booking.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.core.userdetails.User; import org.springframework.security.provisioning.InMemoryUserDetailsManager; import org.springframework.security.web.SecurityFilterChain; import org.springframework.security.web.savedrequest.HttpSessionRequestCache; @Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception { http .formLogin() .loginPage( /spring/login ) .loginProcessingUrl( /spring/loginProcess ) This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Getting Started with Configuration Classes"},{"location":"getting-started-with-configuration-classes.0kj683u0.sw/#appconfig","text":"The AppConfig class is the central configuration class that imports other configuration classes. It uses the '@Import' annotation to include DataAccessConfig , WebMvcConfig , and WebFlowConfig . package org.springframework.webflow.samples.booking.config; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; @Configuration @ComponentScan(basePackages= org.springframework.webflow.samples.booking ) @Import(value={ DataAccessConfig.class, WebMvcConfig.class, WebFlowConfig.class }) public class AppConfig { }","title":"AppConfig"},{"location":"getting-started-with-configuration-classes.0kj683u0.sw/#webmvcconfig","text":"The WebMvcConfig class configures the Spring MVC and integrates it with JSF and Spring Web Flow. It defines beans such as FlowHandlerMapping , FlowHandlerAdapter , and UrlBasedViewResolver . package org.springframework.webflow.samples.booking.config; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.faces.mvc.JsfView; import org.springframework.faces.webflow.JsfFlowHandlerAdapter; import org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter; import org.springframework.web.servlet.mvc.UrlFilenameViewController; import org.springframework.web.servlet.view.UrlBasedViewResolver; import org.springframework.webflow.mvc.servlet.FlowHandlerAdapter; import org.springframework.webflow.mvc.servlet.FlowHandlerMapping; @Configuration public class WebMvcConfig { @Autowired private WebFlowConfig webFlowConfig; @Bean","title":"WebMvcConfig"},{"location":"getting-started-with-configuration-classes.0kj683u0.sw/#webflowconfig","text":"The WebFlowConfig class configures the Spring Web Flow. It defines beans such as FlowExecutor , FlowDefinitionRegistry , and FlowBuilderServices . package org.springframework.webflow.samples.booking.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.faces.config.AbstractFacesFlowConfiguration; import org.springframework.faces.webflow.FlowFacesContextLifecycleListener; import org.springframework.webflow.definition.registry.FlowDefinitionRegistry; import org.springframework.webflow.engine.builder.support.FlowBuilderServices; import org.springframework.webflow.executor.FlowExecutor; import org.springframework.webflow.security.SecurityFlowExecutionListener; @Configuration public class WebFlowConfig extends AbstractFacesFlowConfiguration { @Bean public FlowExecutor flowExecutor() { return getFlowExecutorBuilder(flowRegistry()) .addFlowExecutionListener(new FlowFacesContextLifecycleListener()) .addFlowExecutionListener(new SecurityFlowExecutionListener()) .build(); }","title":"WebFlowConfig"},{"location":"getting-started-with-configuration-classes.0kj683u0.sw/#dataaccessconfig","text":"The DataAccessConfig class configures the data access layer of the application. It defines beans such as PlatformTransactionManager , LocalContainerEntityManagerFactoryBean , and DataSource . package org.springframework.webflow.samples.booking.config; import java.util.Collections; import jakarta.persistence.EntityManagerFactory; import javax.sql.DataSource; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.jdbc.datasource.DriverManagerDataSource; import org.springframework.orm.jpa.JpaTransactionManager; import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean; import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.annotation.EnableTransactionManagement; @Configuration @EnableTransactionManagement(proxyTargetClass=true) public class DataAccessConfig { @Bean","title":"DataAccessConfig"},{"location":"getting-started-with-configuration-classes.0kj683u0.sw/#securityconfig","text":"The SecurityConfig class configures the security settings of the application. It defines beans such as SecurityFilterChain and InMemoryUserDetailsManager . package org.springframework.webflow.samples.booking.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.core.userdetails.User; import org.springframework.security.provisioning.InMemoryUserDetailsManager; import org.springframework.security.web.SecurityFilterChain; import org.springframework.security.web.savedrequest.HttpSessionRequestCache; @Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception { http .formLogin() .loginPage( /spring/login ) .loginProcessingUrl( /spring/loginProcess ) This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"SecurityConfig"},{"location":"getting-started-with-testing-in-booking-faces.qni3pr70.sw/","text":"In the 'booking-faces' project, 'Test' refers to the unit tests written to verify the functionality of the application. These tests are located in the 'src/test' directory. They are written using the JUnit framework and the EasyMock library for creating mock objects. The tests cover various aspects of the application such as the booking flow, main flow, and the services used in these flows. BookingFlowExecutionTests This class contains tests for the booking flow of the application. It extends AbstractXmlFlowExecutionTests which provides a framework for testing a flow execution. The setUp method is used to initialize the BookingService mock. The getResource method specifies the flow definition file to be used for the tests. The configureFlowBuilderContext method is used to register beans and services required for the tests. The testStartBookingFlow method is an example of a test case where a booking flow is started and the expected state and response are asserted. public class BookingFlowExecutionTests extends AbstractXmlFlowExecutionTests { private BookingService bookingService; protected void setUp() { bookingService = EasyMock.createMock(BookingService.class); } @Override protected FlowDefinitionResource getResource(FlowDefinitionResourceFactory resourceFactory) { return resourceFactory.createFileResource( src/main/webapp/WEB-INF/flows/booking/booking-flow.xml ); } @Override protected void configureFlowBuilderContext(MockFlowBuilderContext builderContext) { builderContext.registerBean( bookingService , bookingService); builderContext.getFlowBuilderServices().setConversionService(new FacesConversionService()); } public void testStartBookingFlow() { Booking booking = createTestBooking(); MainFlowExecutionTests This class contains tests for the main flow of the application. Similar to BookingFlowExecutionTests , it extends AbstractXmlFlowExecutionTests and overrides the same methods for setup and configuration. It contains test cases like testStartMainFlow , testSearchHotels , testSelectHotel , and testBookHotel which test different parts of the main flow. public class MainFlowExecutionTests extends AbstractXmlFlowExecutionTests { private BookingService bookingService; protected void setUp() { bookingService = EasyMock.createMock(BookingService.class); } @Override protected FlowDefinitionResource getResource(FlowDefinitionResourceFactory resourceFactory) { return resourceFactory.createFileResource( src/main/webapp/WEB-INF/flows/main/main-flow.xml ); } @Override protected void configureFlowBuilderContext(MockFlowBuilderContext builderContext) { builderContext.registerBean( bookingService , bookingService); builderContext.getFlowBuilderServices().setConversionService(new FacesConversionService()); } public void testStartMainFlow() { List Booking bookings = new ArrayList Booking (); This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Getting Started with Testing in Booking-Faces"},{"location":"getting-started-with-testing-in-booking-faces.qni3pr70.sw/#bookingflowexecutiontests","text":"This class contains tests for the booking flow of the application. It extends AbstractXmlFlowExecutionTests which provides a framework for testing a flow execution. The setUp method is used to initialize the BookingService mock. The getResource method specifies the flow definition file to be used for the tests. The configureFlowBuilderContext method is used to register beans and services required for the tests. The testStartBookingFlow method is an example of a test case where a booking flow is started and the expected state and response are asserted. public class BookingFlowExecutionTests extends AbstractXmlFlowExecutionTests { private BookingService bookingService; protected void setUp() { bookingService = EasyMock.createMock(BookingService.class); } @Override protected FlowDefinitionResource getResource(FlowDefinitionResourceFactory resourceFactory) { return resourceFactory.createFileResource( src/main/webapp/WEB-INF/flows/booking/booking-flow.xml ); } @Override protected void configureFlowBuilderContext(MockFlowBuilderContext builderContext) { builderContext.registerBean( bookingService , bookingService); builderContext.getFlowBuilderServices().setConversionService(new FacesConversionService()); } public void testStartBookingFlow() { Booking booking = createTestBooking();","title":"BookingFlowExecutionTests"},{"location":"getting-started-with-testing-in-booking-faces.qni3pr70.sw/#mainflowexecutiontests","text":"This class contains tests for the main flow of the application. Similar to BookingFlowExecutionTests , it extends AbstractXmlFlowExecutionTests and overrides the same methods for setup and configuration. It contains test cases like testStartMainFlow , testSearchHotels , testSelectHotel , and testBookHotel which test different parts of the main flow. public class MainFlowExecutionTests extends AbstractXmlFlowExecutionTests { private BookingService bookingService; protected void setUp() { bookingService = EasyMock.createMock(BookingService.class); } @Override protected FlowDefinitionResource getResource(FlowDefinitionResourceFactory resourceFactory) { return resourceFactory.createFileResource( src/main/webapp/WEB-INF/flows/main/main-flow.xml ); } @Override protected void configureFlowBuilderContext(MockFlowBuilderContext builderContext) { builderContext.registerBean( bookingService , bookingService); builderContext.getFlowBuilderServices().setConversionService(new FacesConversionService()); } public void testStartMainFlow() { List Booking bookings = new ArrayList Booking (); This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"MainFlowExecutionTests"},{"location":"getting-started.lcmqfuoc.sw/","text":"This document will cover the following topics: The purpose and main functionalities of the spring-webflow-samples repository. Important documents to read from the repository. How to run and debug the main parts of the repository. How to contribute to the repository. Purpose and Main Functionalities The spring-webflow-samples repository is the official samples repository for the Spring Web Flow project. It contains sample projects that demonstrate the use of Spring Web Flow. The main languages used in this repository are CSS and Java. Important Documents The main document to read in this repository is the README.md file. It provides an overview of the repository and instructions on how to run a server or build a war from a sample sub-directory. Running and Debugging To run a server from a sample sub-directory, use the command mvn jetty:run . To build a war, use the command mvn package . Contributing Unfortunately, there is no specific information available in the provided context about how to contribute to this repository. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Getting started"},{"location":"getting-started.lcmqfuoc.sw/#purpose-and-main-functionalities","text":"The spring-webflow-samples repository is the official samples repository for the Spring Web Flow project. It contains sample projects that demonstrate the use of Spring Web Flow. The main languages used in this repository are CSS and Java.","title":"Purpose and Main Functionalities"},{"location":"getting-started.lcmqfuoc.sw/#important-documents","text":"The main document to read in this repository is the README.md file. It provides an overview of the repository and instructions on how to run a server or build a war from a sample sub-directory.","title":"Important Documents"},{"location":"getting-started.lcmqfuoc.sw/#running-and-debugging","text":"To run a server from a sample sub-directory, use the command mvn jetty:run . To build a war, use the command mvn package .","title":"Running and Debugging"},{"location":"getting-started.lcmqfuoc.sw/#contributing","text":"Unfortunately, there is no specific information available in the provided context about how to contribute to this repository. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Contributing"},{"location":"hotel-counting-process.a8sofxvp.sw/","text":"This document will cover the process of counting hotels in the booking system, which includes: Invoking the count function in HotelLazyDataModel Retrieving the number of hotels from the JpaBookingService Forming the search pattern Extracting the search string from the SearchCriteria. graph TD; subgraph booking-faces/src/main/java/org/springframework/webflow/samples/booking count:::mainFlowStyle -- getNumberOfHotels end subgraph booking-faces/src/main/java/org/springframework/webflow/samples/booking getNumberOfHotels:::mainFlowStyle -- getSearchPattern end subgraph booking-faces/src/main/java/org/springframework/webflow/samples/booking getSearchPattern:::mainFlowStyle -- getSearchString end getSearchString:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 Invoking the count function in HotelLazyDataModel The count function in HotelLazyDataModel initiates the process of counting hotels. It calls the getNumberOfHotels function in JpaBookingService. package org.springframework.webflow.samples.booking; Retrieving the number of hotels from the JpaBookingService The getNumberOfHotels function retrieves the number of hotels based on the search criteria. It forms a search pattern and executes a query to count the hotels that match the pattern. @Transactional(readOnly = true) public int getNumberOfHotels(SearchCriteria criteria) { String pattern = getSearchPattern(criteria); Long count = (Long) em .createQuery( select count(h.id) from Hotel h where lower(h.name) like :pattern or lower(h.city) like :pattern + or lower(h.zip) like :pattern or lower(h.address) like :pattern ) .setParameter( pattern , pattern).getSingleResult(); return count.intValue(); } Forming the search pattern The getSearchPattern function forms a search pattern based on the search string in the criteria. If the search string is present, it is converted to lower case and any '*' characters are replaced with '%'. If the search string is not present, the pattern is set to '%'. // helpers private String getSearchPattern(SearchCriteria criteria) { if (StringUtils.hasText(criteria.getSearchString())) { return % + criteria.getSearchString().toLowerCase().replace('*', '%') + % ; } else { return % ; } } Extracting the search string from the SearchCriteria The getSearchString function simply returns the search string from the SearchCriteria object. public String getSearchString() { return searchString; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Hotel Counting Process"},{"location":"hotel-counting-process.a8sofxvp.sw/#invoking-the-count-function-in-hotellazydatamodel","text":"The count function in HotelLazyDataModel initiates the process of counting hotels. It calls the getNumberOfHotels function in JpaBookingService. package org.springframework.webflow.samples.booking;","title":"Invoking the count function in HotelLazyDataModel"},{"location":"hotel-counting-process.a8sofxvp.sw/#retrieving-the-number-of-hotels-from-the-jpabookingservice","text":"The getNumberOfHotels function retrieves the number of hotels based on the search criteria. It forms a search pattern and executes a query to count the hotels that match the pattern. @Transactional(readOnly = true) public int getNumberOfHotels(SearchCriteria criteria) { String pattern = getSearchPattern(criteria); Long count = (Long) em .createQuery( select count(h.id) from Hotel h where lower(h.name) like :pattern or lower(h.city) like :pattern + or lower(h.zip) like :pattern or lower(h.address) like :pattern ) .setParameter( pattern , pattern).getSingleResult(); return count.intValue(); }","title":"Retrieving the number of hotels from the JpaBookingService"},{"location":"hotel-counting-process.a8sofxvp.sw/#forming-the-search-pattern","text":"The getSearchPattern function forms a search pattern based on the search string in the criteria. If the search string is present, it is converted to lower case and any '*' characters are replaced with '%'. If the search string is not present, the pattern is set to '%'. // helpers private String getSearchPattern(SearchCriteria criteria) { if (StringUtils.hasText(criteria.getSearchString())) { return % + criteria.getSearchString().toLowerCase().replace('*', '%') + % ; } else { return % ; } }","title":"Forming the search pattern"},{"location":"hotel-counting-process.a8sofxvp.sw/#extracting-the-search-string-from-the-searchcriteria","text":"The getSearchString function simply returns the search string from the SearchCriteria object. public String getSearchString() { return searchString; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Extracting the search string from the SearchCriteria"},{"location":"hotel-data-loading-process.vu9gv43v.sw/","text":"This document will cover the process of loading hotel data in the Spring Web Flow samples project. The process includes the following steps: Invoking the load function in HotelLazyDataModel.java Calling the findHotels function in JpaBookingService.java Retrieving the search pattern via getSearchPattern function Getting the search string from SearchCriteria.java . graph TD; subgraph booking-faces/src/main/java/org/springframework/webflow/samples/booking load:::mainFlowStyle -- findHotels end subgraph booking-faces/src/main/java/org/springframework/webflow/samples/booking findHotels:::mainFlowStyle -- getSearchPattern end subgraph booking-faces/src/main/java/org/springframework/webflow/samples/booking getSearchPattern:::mainFlowStyle -- getSearchString end getSearchString:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 Invoking the load function The load function in HotelLazyDataModel.java is the entry point for this flow. It is responsible for loading hotel data. package org.springframework.webflow.samples.booking; Calling the findHotels function The findHotels function is called by load . It takes a SearchCriteria object, and other parameters to find and return a list of hotels that match the criteria. @Transactional(readOnly = true) @SuppressWarnings( unchecked ) public List Hotel findHotels(SearchCriteria criteria, int firstResult, String orderBy, boolean ascending) { String pattern = getSearchPattern(criteria); orderBy = (orderBy != null) ? orderBy : name ; String orderDirection = (ascending) ? ASC : DESC ; return em .createQuery( select h from Hotel h where lower(h.name) like :pattern or lower(h.city) like :pattern + or lower(h.zip) like :pattern or lower(h.address) like :pattern order by h. + orderBy + orderDirection).setParameter( pattern , pattern) .setMaxResults(criteria.getPageSize()).setFirstResult(firstResult).getResultList(); } Retrieving the search pattern getSearchPattern is a helper function used by findHotels to generate a search pattern from the SearchCriteria object. // helpers private String getSearchPattern(SearchCriteria criteria) { if (StringUtils.hasText(criteria.getSearchString())) { return % + criteria.getSearchString().toLowerCase().replace('*', '%') + % ; } else { return % ; } } Getting the search string getSearchString is a method in SearchCriteria.java that returns the search string. This string is used by getSearchPattern to generate the search pattern. public String getSearchString() { return searchString; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Hotel Data Loading Process"},{"location":"hotel-data-loading-process.vu9gv43v.sw/#invoking-the-load-function","text":"The load function in HotelLazyDataModel.java is the entry point for this flow. It is responsible for loading hotel data. package org.springframework.webflow.samples.booking;","title":"Invoking the load function"},{"location":"hotel-data-loading-process.vu9gv43v.sw/#calling-the-findhotels-function","text":"The findHotels function is called by load . It takes a SearchCriteria object, and other parameters to find and return a list of hotels that match the criteria. @Transactional(readOnly = true) @SuppressWarnings( unchecked ) public List Hotel findHotels(SearchCriteria criteria, int firstResult, String orderBy, boolean ascending) { String pattern = getSearchPattern(criteria); orderBy = (orderBy != null) ? orderBy : name ; String orderDirection = (ascending) ? ASC : DESC ; return em .createQuery( select h from Hotel h where lower(h.name) like :pattern or lower(h.city) like :pattern + or lower(h.zip) like :pattern or lower(h.address) like :pattern order by h. + orderBy + orderDirection).setParameter( pattern , pattern) .setMaxResults(criteria.getPageSize()).setFirstResult(firstResult).getResultList(); }","title":"Calling the findHotels function"},{"location":"hotel-data-loading-process.vu9gv43v.sw/#retrieving-the-search-pattern","text":"getSearchPattern is a helper function used by findHotels to generate a search pattern from the SearchCriteria object. // helpers private String getSearchPattern(SearchCriteria criteria) { if (StringUtils.hasText(criteria.getSearchString())) { return % + criteria.getSearchString().toLowerCase().replace('*', '%') + % ; } else { return % ; } }","title":"Retrieving the search pattern"},{"location":"hotel-data-loading-process.vu9gv43v.sw/#getting-the-search-string","text":"getSearchString is a method in SearchCriteria.java that returns the search string. This string is used by getSearchPattern to generate the search pattern. public String getSearchString() { return searchString; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Getting the search string"},{"location":"hotel-search-process.pph6nl86.sw/","text":"This document will cover the process of searching for hotels in the Spring Web Flow project. The process includes the following steps: Invoking the list function in HotelsController.java Calling the findHotels function in JpaBookingService.java Executing the getSearchPattern function in JpaBookingService.java Running the getSearchString function in SearchCriteria.java . graph TD; subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking list:::mainFlowStyle -- findHotels end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking findHotels:::mainFlowStyle -- getSearchPattern end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking getSearchPattern:::mainFlowStyle -- getSearchString end getSearchString:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 Invoking the list function in HotelsController.java The process starts with the list function in HotelsController.java . This function is responsible for initiating the search for hotels based on the provided search criteria. Calling the findHotels function in JpaBookingService.java The list function then calls the findHotels function in JpaBookingService.java . This function takes the search criteria as input and uses it to construct a query to find matching hotels. It does this by calling the getSearchPattern function to get the search pattern and then using this pattern to query the database. @Transactional(readOnly = true) @SuppressWarnings( unchecked ) public List Hotel findHotels(SearchCriteria criteria) { String pattern = getSearchPattern(criteria); int startIndex = criteria.getPage() * criteria.getPageSize(); return em .createQuery( select h from Hotel h where lower(h.name) like :pattern or lower(h.city) like :pattern + or lower(h.zip) like :pattern or lower(h.address) like :pattern ) .setParameter( pattern , pattern).setFirstResult(startIndex).setMaxResults(criteria.getPageSize()) .getResultList(); } Executing the getSearchPattern function in JpaBookingService.java The getSearchPattern function in JpaBookingService.java is responsible for converting the search string from the search criteria into a pattern that can be used in the database query. It does this by calling the getSearchString function to get the search string and then converting this string into a pattern. private String getSearchPattern(SearchCriteria criteria) { if (StringUtils.hasText(criteria.getSearchString())) { return % + criteria.getSearchString().toLowerCase().replace('*', '%') + % ; } else { return % ; } } Running the getSearchString function in SearchCriteria.java The getSearchString function in SearchCriteria.java simply returns the search string from the search criteria. This string is then used by the getSearchPattern function to create the search pattern. public String getSearchString() { return searchString; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Hotel Search Process"},{"location":"hotel-search-process.pph6nl86.sw/#invoking-the-list-function-in-hotelscontrollerjava","text":"The process starts with the list function in HotelsController.java . This function is responsible for initiating the search for hotels based on the provided search criteria.","title":"Invoking the list function in HotelsController.java"},{"location":"hotel-search-process.pph6nl86.sw/#calling-the-findhotels-function-in-jpabookingservicejava","text":"The list function then calls the findHotels function in JpaBookingService.java . This function takes the search criteria as input and uses it to construct a query to find matching hotels. It does this by calling the getSearchPattern function to get the search pattern and then using this pattern to query the database. @Transactional(readOnly = true) @SuppressWarnings( unchecked ) public List Hotel findHotels(SearchCriteria criteria) { String pattern = getSearchPattern(criteria); int startIndex = criteria.getPage() * criteria.getPageSize(); return em .createQuery( select h from Hotel h where lower(h.name) like :pattern or lower(h.city) like :pattern + or lower(h.zip) like :pattern or lower(h.address) like :pattern ) .setParameter( pattern , pattern).setFirstResult(startIndex).setMaxResults(criteria.getPageSize()) .getResultList(); }","title":"Calling the findHotels function in JpaBookingService.java"},{"location":"hotel-search-process.pph6nl86.sw/#executing-the-getsearchpattern-function-in-jpabookingservicejava","text":"The getSearchPattern function in JpaBookingService.java is responsible for converting the search string from the search criteria into a pattern that can be used in the database query. It does this by calling the getSearchString function to get the search string and then converting this string into a pattern. private String getSearchPattern(SearchCriteria criteria) { if (StringUtils.hasText(criteria.getSearchString())) { return % + criteria.getSearchString().toLowerCase().replace('*', '%') + % ; } else { return % ; } }","title":"Executing the getSearchPattern function in JpaBookingService.java"},{"location":"hotel-search-process.pph6nl86.sw/#running-the-getsearchstring-function-in-searchcriteriajava","text":"The getSearchString function in SearchCriteria.java simply returns the search string from the search criteria. This string is then used by the getSearchPattern function to create the search pattern. public String getSearchString() { return searchString; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Running the getSearchString function in SearchCriteria.java"},{"location":"incorporating-jsf-components-into-the-spring-framework.uahu8dtp.sw/","text":"This document will cover the process of incorporating the JSF components into the Spring framework, which includes: Understanding the role of JSF components in the Spring framework How JSF components are defined and used in the codebase The configuration of JSF components in the Spring context. Understanding the role of JSF components in the Spring framework JavaServer Faces (JSF) is a Java specification for building component-based user interfaces for web applications. In the context of the Spring framework, JSF components are used to build the user interface layer of web applications. They are incorporated into the Spring framework through specific configurations and annotations. How JSF components are defined and used in the codebase Here, we can see the import statements for JsfView and JsfFlowHandlerAdapter from the org.springframework.faces.mvc and org.springframework.faces.webflow packages respectively. These classes are used to integrate JSF components into the Spring MVC framework. import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.faces.mvc.JsfView; import org.springframework.faces.webflow.JsfFlowHandlerAdapter; import org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter; import org.springframework.web.servlet.mvc.UrlFilenameViewController; In this file, we can see the FacesHelper class which is annotated with @Component . This annotation is used to indicate that the class is a JSF component and should be managed by the Spring framework. package org.springframework.samples.webflow.jsf; import jakarta.faces.context.FacesContext; import org.springframework.stereotype.Component; @Component The configuration of JSF components in the Spring context This XML file is part of the Spring configuration. It defines the beans and their dependencies. The xsi:schemaLocation attribute specifies the location of the XML schema documents that define the structure of the Spring configuration files. The http://www.springframework.org/schema/mvc namespace is used for configuring Spring MVC, which includes the integration of JSF components. xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd !-- This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Incorporating JSF Components into the Spring Framework"},{"location":"incorporating-jsf-components-into-the-spring-framework.uahu8dtp.sw/#understanding-the-role-of-jsf-components-in-the-spring-framework","text":"JavaServer Faces (JSF) is a Java specification for building component-based user interfaces for web applications. In the context of the Spring framework, JSF components are used to build the user interface layer of web applications. They are incorporated into the Spring framework through specific configurations and annotations.","title":"Understanding the role of JSF components in the Spring framework"},{"location":"incorporating-jsf-components-into-the-spring-framework.uahu8dtp.sw/#how-jsf-components-are-defined-and-used-in-the-codebase","text":"Here, we can see the import statements for JsfView and JsfFlowHandlerAdapter from the org.springframework.faces.mvc and org.springframework.faces.webflow packages respectively. These classes are used to integrate JSF components into the Spring MVC framework. import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.faces.mvc.JsfView; import org.springframework.faces.webflow.JsfFlowHandlerAdapter; import org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter; import org.springframework.web.servlet.mvc.UrlFilenameViewController; In this file, we can see the FacesHelper class which is annotated with @Component . This annotation is used to indicate that the class is a JSF component and should be managed by the Spring framework. package org.springframework.samples.webflow.jsf; import jakarta.faces.context.FacesContext; import org.springframework.stereotype.Component; @Component","title":"How JSF components are defined and used in the codebase"},{"location":"incorporating-jsf-components-into-the-spring-framework.uahu8dtp.sw/#the-configuration-of-jsf-components-in-the-spring-context","text":"This XML file is part of the Spring configuration. It defines the beans and their dependencies. The xsi:schemaLocation attribute specifies the location of the XML schema documents that define the structure of the Spring configuration files. The http://www.springframework.org/schema/mvc namespace is used for configuring Spring MVC, which includes the integration of JSF components. xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd !-- This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"The configuration of JSF components in the Spring context"},{"location":"interactions-between-layout-files-and-the-jsf-lifecycle.ic3aodkq.sw/","text":"This document will cover the interaction of layout files with the JSF lifecycle in the context of the Spring Web Flow samples repository. The main points of discussion are: The role of layout files in JSF applications The configuration of JSF in the Spring Web Flow samples The interaction of layout files with the JSF lifecycle. Role of Layout Files in JSF Applications In JSF applications, layout files, typically XHTML files, define the structure of the user interface. They contain JSF tags that are processed during the JSF lifecycle. The layout files in the Spring Web Flow samples are located in the WEB-INF/layouts directory of each project. Configuration of JSF in Spring Web Flow Samples The onStartup method configures the JSF environment. It sets various initialization parameters for JSF and Facelets. For example, it sets the default suffix for JSF view templates to .xhtml , enabling the use of Facelets. It also sets the Facelets refresh period to 1, causing Facelets to refresh templates during development. @Override public void onStartup(ServletContext servletContext) throws ServletException { // Use JSF view templates saved as *.xhtml, for use with Facelets servletContext.setInitParameter( jakarta.faces.DEFAULT_SUFFIX , .xhtml ); // Enable special Facelets debug output during development servletContext.setInitParameter( jakarta.faces.PROJECT_STAGE , Development ); // Causes Facelets to refresh templates during development servletContext.setInitParameter( jakarta.faces.FACELETS_REFRESH_PERIOD , 1 ); // Declare Spring Security Facelets tag library servletContext.setInitParameter( jakarta.faces.FACELETS_LIBRARIES , /WEB-INF/springsecurity.taglib.xml ); // Comment out if not using Mojarra servletContext.addListener(com.sun.faces.config.ConfigureListener.class); // Let the DispatcherServlet be registered super.onStartup(servletContext); } Interaction of Layout Files with the JSF Lifecycle During the JSF lifecycle, the JSF implementation processes the tags in the layout files. This includes converting component data, validating user input, and updating the model. The layout files in the Spring Web Flow samples, such as standard.xhtml , are processed in this way. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Interactions between Layout Files and the JSF Lifecycle"},{"location":"interactions-between-layout-files-and-the-jsf-lifecycle.ic3aodkq.sw/#role-of-layout-files-in-jsf-applications","text":"In JSF applications, layout files, typically XHTML files, define the structure of the user interface. They contain JSF tags that are processed during the JSF lifecycle. The layout files in the Spring Web Flow samples are located in the WEB-INF/layouts directory of each project.","title":"Role of Layout Files in JSF Applications"},{"location":"interactions-between-layout-files-and-the-jsf-lifecycle.ic3aodkq.sw/#configuration-of-jsf-in-spring-web-flow-samples","text":"The onStartup method configures the JSF environment. It sets various initialization parameters for JSF and Facelets. For example, it sets the default suffix for JSF view templates to .xhtml , enabling the use of Facelets. It also sets the Facelets refresh period to 1, causing Facelets to refresh templates during development. @Override public void onStartup(ServletContext servletContext) throws ServletException { // Use JSF view templates saved as *.xhtml, for use with Facelets servletContext.setInitParameter( jakarta.faces.DEFAULT_SUFFIX , .xhtml ); // Enable special Facelets debug output during development servletContext.setInitParameter( jakarta.faces.PROJECT_STAGE , Development ); // Causes Facelets to refresh templates during development servletContext.setInitParameter( jakarta.faces.FACELETS_REFRESH_PERIOD , 1 ); // Declare Spring Security Facelets tag library servletContext.setInitParameter( jakarta.faces.FACELETS_LIBRARIES , /WEB-INF/springsecurity.taglib.xml ); // Comment out if not using Mojarra servletContext.addListener(com.sun.faces.config.ConfigureListener.class); // Let the DispatcherServlet be registered super.onStartup(servletContext); }","title":"Configuration of JSF in Spring Web Flow Samples"},{"location":"interactions-between-layout-files-and-the-jsf-lifecycle.ic3aodkq.sw/#interaction-of-layout-files-with-the-jsf-lifecycle","text":"During the JSF lifecycle, the JSF implementation processes the tags in the layout files. This includes converting component data, validating user input, and updating the model. The layout files in the Spring Web Flow samples, such as standard.xhtml , are processed in this way. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Interaction of Layout Files with the JSF Lifecycle"},{"location":"introduction-to-config.rd54gluv.sw/","text":"The 'Config' in the booking-mvc application refers to the configuration classes that set up the application's behavior. These classes are used to configure various aspects of the application such as security, data access, web MVC, and web flow. They are typically annotated with @Configuration and contain methods annotated with @Bean to provide instances of various objects required for the application. For instance, the SecurityConfig class configures the security aspects of the application, such as form login and logout settings. The DataAccessConfig class sets up the data source and transaction management for the application. The WebMvcConfig and WebFlowConfig classes configure the MVC and Web Flow aspects of the application respectively. These configuration classes are used in the DispatcherServletInitializer class, which sets up the DispatcherServlet for the application. The getRootConfigClasses method returns the configuration classes that should be loaded for the application. WebMvcConfig The WebMvcConfig class configures the MVC settings for the application. It sets up resource handlers, default servlet handling, view controllers, and beans for handling web flows and views. @EnableWebMvc @Configuration public class WebMvcConfig implements WebMvcConfigurer, ServletContextAware { @Autowired private WebFlowConfig webFlowConfig; private ServletContext servletContext; @Override public void setServletContext(ServletContext servletContext) { this.servletContext = servletContext; } @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler( /resources/** ).addResourceLocations( / , classpath:/META-INF/web-resources/ ); } @Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) { WebFlowConfig The WebFlowConfig class configures the web flow settings for the application. It sets up the flow executor, flow registry, flow builder services, view factory creator, and validator. package org.springframework.webflow.samples.booking.config; import java.util.Collections; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean; import org.springframework.webflow.config.AbstractFlowConfiguration; import org.springframework.webflow.definition.registry.FlowDefinitionRegistry; import org.springframework.webflow.engine.builder.support.FlowBuilderServices; import org.springframework.webflow.executor.FlowExecutor; import org.springframework.webflow.mvc.builder.MvcViewFactoryCreator; import org.springframework.webflow.security.SecurityFlowExecutionListener; @Configuration public class WebFlowConfig extends AbstractFlowConfiguration { @Autowired private WebMvcConfig webMvcConfig; SecurityConfig The SecurityConfig class configures the security settings for the application. It sets up the security filter chain and user details service. package org.springframework.webflow.samples.booking.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.core.userdetails.User; import org.springframework.security.provisioning.InMemoryUserDetailsManager; import org.springframework.security.web.SecurityFilterChain; import org.springframework.security.web.util.matcher.AntPathRequestMatcher; @Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception { http .formLogin() .loginPage( /login ) .loginProcessingUrl( /loginProcess ) DataAccessConfig The DataAccessConfig class configures the data access settings for the application. It sets up the transaction manager, entity manager factory, and data source. package org.springframework.webflow.samples.booking.config; import java.util.Collections; import jakarta.persistence.EntityManagerFactory; import javax.sql.DataSource; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.jdbc.datasource.DriverManagerDataSource; import org.springframework.orm.jpa.JpaTransactionManager; import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean; import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.annotation.EnableTransactionManagement; @Configuration @EnableTransactionManagement @ComponentScan(basePackages= org.springframework.webflow.samples.booking ) public class DataAccessConfig { This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Introduction to Config"},{"location":"introduction-to-config.rd54gluv.sw/#webmvcconfig","text":"The WebMvcConfig class configures the MVC settings for the application. It sets up resource handlers, default servlet handling, view controllers, and beans for handling web flows and views. @EnableWebMvc @Configuration public class WebMvcConfig implements WebMvcConfigurer, ServletContextAware { @Autowired private WebFlowConfig webFlowConfig; private ServletContext servletContext; @Override public void setServletContext(ServletContext servletContext) { this.servletContext = servletContext; } @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler( /resources/** ).addResourceLocations( / , classpath:/META-INF/web-resources/ ); } @Override public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {","title":"WebMvcConfig"},{"location":"introduction-to-config.rd54gluv.sw/#webflowconfig","text":"The WebFlowConfig class configures the web flow settings for the application. It sets up the flow executor, flow registry, flow builder services, view factory creator, and validator. package org.springframework.webflow.samples.booking.config; import java.util.Collections; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean; import org.springframework.webflow.config.AbstractFlowConfiguration; import org.springframework.webflow.definition.registry.FlowDefinitionRegistry; import org.springframework.webflow.engine.builder.support.FlowBuilderServices; import org.springframework.webflow.executor.FlowExecutor; import org.springframework.webflow.mvc.builder.MvcViewFactoryCreator; import org.springframework.webflow.security.SecurityFlowExecutionListener; @Configuration public class WebFlowConfig extends AbstractFlowConfiguration { @Autowired private WebMvcConfig webMvcConfig;","title":"WebFlowConfig"},{"location":"introduction-to-config.rd54gluv.sw/#securityconfig","text":"The SecurityConfig class configures the security settings for the application. It sets up the security filter chain and user details service. package org.springframework.webflow.samples.booking.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.core.userdetails.User; import org.springframework.security.provisioning.InMemoryUserDetailsManager; import org.springframework.security.web.SecurityFilterChain; import org.springframework.security.web.util.matcher.AntPathRequestMatcher; @Configuration @EnableWebSecurity public class SecurityConfig { @Bean public SecurityFilterChain filterChain(HttpSecurity http) throws Exception { http .formLogin() .loginPage( /login ) .loginProcessingUrl( /loginProcess )","title":"SecurityConfig"},{"location":"introduction-to-config.rd54gluv.sw/#dataaccessconfig","text":"The DataAccessConfig class configures the data access settings for the application. It sets up the transaction manager, entity manager factory, and data source. package org.springframework.webflow.samples.booking.config; import java.util.Collections; import jakarta.persistence.EntityManagerFactory; import javax.sql.DataSource; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; import org.springframework.jdbc.datasource.DriverManagerDataSource; import org.springframework.orm.jpa.JpaTransactionManager; import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean; import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter; import org.springframework.transaction.PlatformTransactionManager; import org.springframework.transaction.annotation.EnableTransactionManagement; @Configuration @EnableTransactionManagement @ComponentScan(basePackages= org.springframework.webflow.samples.booking ) public class DataAccessConfig { This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"DataAccessConfig"},{"location":"introduction-to-flows.pzksxmce.sw/","text":"Flows in Spring Web Flow are a sequence of steps that guide a user through a process or some business logic. It's a way to manage and encapsulate sequences of user interactions. Each flow is defined in an XML file, like the ones in the 'embedded-flow' and 'embedded-flow-in-modal-dialog' directories. These XML files define the states of the flow and the transitions between them. For example, in the 'embedded-flow' directory, the flow.xml file defines a flow with states 'step1', 'step2', 'success', and 'cancel'. Each state represents a step in the process, and transitions define how to move from one state to another based on user actions. The 'view-state' elements represent states in which a view is displayed to the user, and the 'end-state' elements represent terminal states of the flow. The 'transition' elements define the navigation rules between states. Flow Definition This is an example of a flow definition. It defines two view states ( step1 and step2 ), and two end states ( success and cancel ). Transitions are defined to move between these states based on user actions. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd view-state id= step1 view= embeddedFlow/step1 transition on= next to= step2 / transition on= cancel to= cancel / /view-state view-state id= step2 view= embeddedFlow/step2 transition on= previous to= step1 / transition on= finish to= success / transition on= cancel to= cancel / /view-state end-state id= success view= embeddedFlow/success / end-state id= cancel view= embeddedFlow/cancel / Flow Views This is an example of a view associated with a state in a flow. The view is a JSP file that generates the HTML to be displayed to the user when the flow is in the associated state. ```java server pages This is step 1 of the embedded flow Cancel Next Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'next',event:'onclick',formId:'step1',params:{fragments:\"body\"}})); Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'cancel',event:'onclick',formId:'step1',params:{fragments:\"body\"}})); --- /SwmSnippet SwmSnippet path= /webflow-showcase/src/main/webapp/WEB-INF/flows/embedded-flow-in-modal-dialog/flow.xml line= 1 --- # Flow Transitions This is another example of a flow definition, showing how transitions are defined. The `on` attribute of the `transition` element specifies the event that triggers the transition, and the `to` attribute specifies the state to transition to. ```xml ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd view-state id= step1 view= embeddedFlowInModalDialog/step1 transition on= next to= step2 / transition on= cancel to= cancel / /view-state view-state id= step2 view= embeddedFlowInModalDialog/step2 transition on= previous to= step1 / transition on= finish to= success / transition on= cancel to= cancel / /view-state end-state id= success view= externalRedirect:embeddedFlowInModalDialogContainer?result=success / end-state id= cancel view= externalRedirect:embeddedFlowInModalDialogContainer?result=cancel / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Introduction to Flows"},{"location":"introduction-to-flows.pzksxmce.sw/#flow-definition","text":"This is an example of a flow definition. It defines two view states ( step1 and step2 ), and two end states ( success and cancel ). Transitions are defined to move between these states based on user actions. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd view-state id= step1 view= embeddedFlow/step1 transition on= next to= step2 / transition on= cancel to= cancel / /view-state view-state id= step2 view= embeddedFlow/step2 transition on= previous to= step1 / transition on= finish to= success / transition on= cancel to= cancel / /view-state end-state id= success view= embeddedFlow/success / end-state id= cancel view= embeddedFlow/cancel /","title":"Flow Definition"},{"location":"introduction-to-flows.pzksxmce.sw/#flow-views","text":"This is an example of a view associated with a state in a flow. The view is a JSP file that generates the HTML to be displayed to the user when the flow is in the associated state. ```java server pages This is step 1 of the embedded flow Cancel Next Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'next',event:'onclick',formId:'step1',params:{fragments:\"body\"}})); Spring.addDecoration(new Spring.AjaxEventDecoration({elementId:'cancel',event:'onclick',formId:'step1',params:{fragments:\"body\"}})); --- /SwmSnippet SwmSnippet path= /webflow-showcase/src/main/webapp/WEB-INF/flows/embedded-flow-in-modal-dialog/flow.xml line= 1 --- # Flow Transitions This is another example of a flow definition, showing how transitions are defined. The `on` attribute of the `transition` element specifies the event that triggers the transition, and the `to` attribute specifies the state to transition to. ```xml ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd view-state id= step1 view= embeddedFlowInModalDialog/step1 transition on= next to= step2 / transition on= cancel to= cancel / /view-state view-state id= step2 view= embeddedFlowInModalDialog/step2 transition on= previous to= step1 / transition on= finish to= success / transition on= cancel to= cancel / /view-state end-state id= success view= externalRedirect:embeddedFlowInModalDialogContainer?result=success / end-state id= cancel view= externalRedirect:embeddedFlowInModalDialogContainer?result=cancel / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Flow Views"},{"location":"introduction-to-flows.tefxrqtj.sw/","text":"Flows in the Spring Web Flow framework, such as those found in the booking-faces/src/main/webapp/WEB-INF/flows directory, are a key concept that define a series of steps leading to a business goal. They encapsulate sequences of user interactions, preserving session state across requests. Each flow is defined in an XML file, like main-flow.xml or booking-flow.xml , and consists of states and transitions. For instance, the bookHotel subflow state in main-flow.xml represents a part of the user journey where a hotel booking is made. Booking Flow The enterBookingDetails state is the starting point of the booking flow. From here, the user can either proceed to the reviewBooking state or cancel the booking, which leads to the bookingCancelled state. view-state id= enterBookingDetails model= booking transition on= proceed to= reviewBooking / transition on= cancel to= bookingCancelled bind= false / In the reviewBooking state, the user can confirm the booking. On confirmation, the booking is persisted and the flow transitions to the bookingConfirmed state. view-state id= reviewBooking transition on= confirm to= bookingConfirmed evaluate expression= bookingService.persistBooking(booking) / The bookingConfirmed and bookingCancelled states are end states, signifying the completion of the flow. end-state id= bookingConfirmed / end-state id= bookingCancelled / Main Flow The bookHotel state in the main flow is a subflow state, which calls the booking flow. The input to the booking flow is the hotel id, and on completion, the main flow transitions to the finish state. subflow-state id= bookHotel subflow= booking input name= hotelId value= hotel.id / transition on= bookingConfirmed to= finish / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Introduction to Flows"},{"location":"introduction-to-flows.tefxrqtj.sw/#booking-flow","text":"The enterBookingDetails state is the starting point of the booking flow. From here, the user can either proceed to the reviewBooking state or cancel the booking, which leads to the bookingCancelled state. view-state id= enterBookingDetails model= booking transition on= proceed to= reviewBooking / transition on= cancel to= bookingCancelled bind= false / In the reviewBooking state, the user can confirm the booking. On confirmation, the booking is persisted and the flow transitions to the bookingConfirmed state. view-state id= reviewBooking transition on= confirm to= bookingConfirmed evaluate expression= bookingService.persistBooking(booking) / The bookingConfirmed and bookingCancelled states are end states, signifying the completion of the flow. end-state id= bookingConfirmed / end-state id= bookingCancelled /","title":"Booking Flow"},{"location":"introduction-to-flows.tefxrqtj.sw/#main-flow","text":"The bookHotel state in the main flow is a subflow state, which calls the booking flow. The input to the booking flow is the hotel id, and on completion, the main flow transitions to the finish state. subflow-state id= bookHotel subflow= booking input name= hotelId value= hotel.id / transition on= bookingConfirmed to= finish / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Main Flow"},{"location":"introduction-to-layouts-in-booking-mvc.65c4ak45.sw/","text":"Layouts in the booking-mvc application are used to define the structure of the web pages. They provide a consistent look and feel across all pages by defining common elements such as headers, footers, and navigation menus. The standard.html file in the layouts directory is a Thymeleaf template that serves as the main layout for the application. It includes links to stylesheets, scripts, and other resources, and defines placeholders for the page-specific content. Layout Structure This is the standard layout used in the booking-mvc application. It defines the HTML structure of the page, including the head and body sections. The body section includes common elements such as the header, content, and footer. The unique content for each page is inserted at the specified location in the layout. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org xmlns:sec= http://www.thymeleaf.org lang= en head title Spring Travel: Spring MVC and Web Flow Reference Application /title meta http-equiv= Content-Type content= text/html; charset=UTF-8 / link rel= stylesheet type= text/css media= screen, projection href= ../../styles/blueprint/screen.css th:href= @{/resources/styles/blueprint/screen.css} / link rel= stylesheet type= text/css media= print href= ../../styles/blueprint/print.css th:href= @{/resources/styles/blueprint/print.css} / !--[if lt IE 8] link rel= stylesheet type= text/css media= screen, projection Using Stylesheets in Layouts This is an example of how stylesheets are included in the layout. The booking.css stylesheet is linked in the head section of the layout, making its styles available to all pages that use this layout. link rel= stylesheet type= text/css media= screen href= ../../styles/booking.css th:href= @{/resources/styles/booking.css} / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Introduction to Layouts in Booking MVC"},{"location":"introduction-to-layouts-in-booking-mvc.65c4ak45.sw/#layout-structure","text":"This is the standard layout used in the booking-mvc application. It defines the HTML structure of the page, including the head and body sections. The body section includes common elements such as the header, content, and footer. The unique content for each page is inserted at the specified location in the layout. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org xmlns:sec= http://www.thymeleaf.org lang= en head title Spring Travel: Spring MVC and Web Flow Reference Application /title meta http-equiv= Content-Type content= text/html; charset=UTF-8 / link rel= stylesheet type= text/css media= screen, projection href= ../../styles/blueprint/screen.css th:href= @{/resources/styles/blueprint/screen.css} / link rel= stylesheet type= text/css media= print href= ../../styles/blueprint/print.css th:href= @{/resources/styles/blueprint/print.css} / !--[if lt IE 8] link rel= stylesheet type= text/css media= screen, projection","title":"Layout Structure"},{"location":"introduction-to-layouts-in-booking-mvc.65c4ak45.sw/#using-stylesheets-in-layouts","text":"This is an example of how stylesheets are included in the layout. The booking.css stylesheet is linked in the head section of the layout, making its styles available to all pages that use this layout. link rel= stylesheet type= text/css media= screen href= ../../styles/booking.css th:href= @{/resources/styles/booking.css} / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Using Stylesheets in Layouts"},{"location":"introduction-to-webflow-showcase.b01gg11g.sw/","text":"Webflow showcase is a project within the Spring Web Flow samples. It's a Maven project, as indicated by the pom.xml file, and it's packaged as a war file. This project is designed to demonstrate the capabilities of Spring Web Flow, a framework for building web applications in Spring. It includes dependencies on various Spring modules, such as spring-webmvc, spring-jdbc, and spring-orm, as well as on Spring Web Flow itself. The project also uses Apache Tiles for layout, Hibernate Validator for JSR 303 validation, and Log4j for logging. Project Configuration This is the Maven Project Object Model (POM) for the Webflow showcase. It defines the project structure, dependencies, and build configuration. Key dependencies include Spring Web MVC, Spring JDBC, Spring ORM, and Spring Web Flow. The build section specifies the use of the Maven Compiler Plugin and the Jetty Maven Plugin. ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId webflow-showcase /artifactId name Spring Web Flow Showcase /name packaging war /packaging version 1.0.0-BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId Webflow Showcase Endpoints Understanding the Webflow Showcase Endpoints Root Endpoint (/) The root endpoint (/) is mapped directly to the 'home' view without any controller processing. This means when the application is accessed from the root URL, the 'home' view is returned to the client. mvc:view-controller path= / view-name= home / Embedded Flow Container Endpoint (/embeddedFlowContainer) The /embeddedFlowContainer endpoint is also mapped directly to a view with the same name. This endpoint is used to access the 'embeddedFlowContainer' view. mvc:view-controller path= /embeddedFlowContainer / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Introduction to Webflow Showcase"},{"location":"introduction-to-webflow-showcase.b01gg11g.sw/#project-configuration","text":"This is the Maven Project Object Model (POM) for the Webflow showcase. It defines the project structure, dependencies, and build configuration. Key dependencies include Spring Web MVC, Spring JDBC, Spring ORM, and Spring Web Flow. The build section specifies the use of the Maven Compiler Plugin and the Jetty Maven Plugin. ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId webflow-showcase /artifactId name Spring Web Flow Showcase /name packaging war /packaging version 1.0.0-BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId","title":"Project Configuration"},{"location":"introduction-to-webflow-showcase.b01gg11g.sw/#webflow-showcase-endpoints","text":"Understanding the Webflow Showcase Endpoints","title":"Webflow Showcase Endpoints"},{"location":"introduction-to-webflow-showcase.b01gg11g.sw/#root-endpoint","text":"The root endpoint (/) is mapped directly to the 'home' view without any controller processing. This means when the application is accessed from the root URL, the 'home' view is returned to the client. mvc:view-controller path= / view-name= home /","title":"Root Endpoint (/)"},{"location":"introduction-to-webflow-showcase.b01gg11g.sw/#embedded-flow-container-endpoint-embeddedflowcontainer","text":"The /embeddedFlowContainer endpoint is also mapped directly to a view with the same name. This endpoint is used to access the 'embeddedFlowContainer' view. mvc:view-controller path= /embeddedFlowContainer / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Embedded Flow Container Endpoint (/embeddedFlowContainer)"},{"location":"mapping-uiinsert-tags-to-uidefine-tags-in-jsf.chpoy6bl.sw/","text":"This document will cover the use of ui:insert and ui:define tags in the application. We'll cover: What are ui:insert and ui:define tags How they are used in the application How they correspond to each other in different pages of the application. What are ui:insert and ui:define tags ui:insert and ui:define are Facelets tags used in JSF (JavaServer Faces) to create reusable templates. ui:insert is used in the template file to define a placeholder for content, while ui:define is used in the client pages to provide the actual content for these placeholders. How they are used in the application In this standard.xhtml layout file, ui:insert tags are used to define placeholders for headIncludes , title , notes , and content . These placeholders will be filled with actual content in the client pages using ui:define tags. ui:insert name= headIncludes / /h:head h:body div class= container div h1 JSF 2, PrimeFaces, and Spring Web Flow /h1 h3 class= alt ui:insert name= title / /h3 hr/ /div div ui:insert name= notes / /div div ui:insert name= content / /div How they correspond to each other in different pages of the application In the client pages of the application, ui:define tags are used to provide the actual content for the placeholders defined in the template file. The name attribute of the ui:define tag should match the name attribute of the corresponding ui:insert tag in the template file. For example, if there is a ui:insert name=\"content\"/ in the template file, there should be a ui:define name=\"content\" Actual Content /ui:define in the client page. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Mapping <ui:insert> Tags to <ui:define> Tags in JSF"},{"location":"mapping-uiinsert-tags-to-uidefine-tags-in-jsf.chpoy6bl.sw/#what-are-ltuiinsertgt-and-ltuidefinegt-tags","text":"ui:insert and ui:define are Facelets tags used in JSF (JavaServer Faces) to create reusable templates. ui:insert is used in the template file to define a placeholder for content, while ui:define is used in the client pages to provide the actual content for these placeholders.","title":"What are &lt;ui:insert&gt; and &lt;ui:define&gt; tags"},{"location":"mapping-uiinsert-tags-to-uidefine-tags-in-jsf.chpoy6bl.sw/#how-they-are-used-in-the-application","text":"In this standard.xhtml layout file, ui:insert tags are used to define placeholders for headIncludes , title , notes , and content . These placeholders will be filled with actual content in the client pages using ui:define tags. ui:insert name= headIncludes / /h:head h:body div class= container div h1 JSF 2, PrimeFaces, and Spring Web Flow /h1 h3 class= alt ui:insert name= title / /h3 hr/ /div div ui:insert name= notes / /div div ui:insert name= content / /div","title":"How they are used in the application"},{"location":"mapping-uiinsert-tags-to-uidefine-tags-in-jsf.chpoy6bl.sw/#how-they-correspond-to-each-other-in-different-pages-of-the-application","text":"In the client pages of the application, ui:define tags are used to provide the actual content for the placeholders defined in the template file. The name attribute of the ui:define tag should match the name attribute of the corresponding ui:insert tag in the template file. For example, if there is a ui:insert name=\"content\"/ in the template file, there should be a ui:define name=\"content\" Actual Content /ui:define in the client page. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"How they correspond to each other in different pages of the application"},{"location":"maven-configuration-in-booking-faces.7d0c6ych.sw/","text":"This document provides a detailed walkthrough of how Maven is used in the booking-faces module of the Spring Web Flow samples repository. Project Information The pom.xml file starts by defining the project information. It specifies the model version, group ID, artifact ID, packaging type, name, and version of the project. It also defines the parent project, which is spring-webflow-samples . ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId booking-faces /artifactId packaging war /packaging name Hotel Booking : Spring Web Flow with JSF /name version 1.0.0.BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent Dependencies This section lists all the dependencies required by the booking-faces module. It includes dependencies for Spring, Servlet, JSF implementation, Database, JPA, JSR 303 with Hibernate Validator, JAXB2, Logging, and Testing. Each dependency is defined by its group ID, artifact ID, and version. Some dependencies also specify the scope. dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-jdbc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-orm /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-binding /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId Build Configuration The build configuration section specifies the final name of the project and the plugins used. The plugins include the maven-war-plugin , maven-compiler-plugin , maven-surefire-plugin , and jetty-maven-plugin . Each plugin is defined by its group ID, artifact ID, version, and configuration. build finalName booking-faces /finalName plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-war-plugin /artifactId version 3.1.0 /version configuration failOnMissingWebXml false /failOnMissingWebXml /configuration /plugin plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.7.0 /version configuration source 17 /source target 17 /target /configuration /plugin plugin This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Maven Configuration in booking-faces"},{"location":"maven-configuration-in-booking-faces.7d0c6ych.sw/#project-information","text":"The pom.xml file starts by defining the project information. It specifies the model version, group ID, artifact ID, packaging type, name, and version of the project. It also defines the parent project, which is spring-webflow-samples . ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId booking-faces /artifactId packaging war /packaging name Hotel Booking : Spring Web Flow with JSF /name version 1.0.0.BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent","title":"Project Information"},{"location":"maven-configuration-in-booking-faces.7d0c6ych.sw/#dependencies","text":"This section lists all the dependencies required by the booking-faces module. It includes dependencies for Spring, Servlet, JSF implementation, Database, JPA, JSR 303 with Hibernate Validator, JAXB2, Logging, and Testing. Each dependency is defined by its group ID, artifact ID, and version. Some dependencies also specify the scope. dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-jdbc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-orm /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-binding /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId","title":"Dependencies"},{"location":"maven-configuration-in-booking-faces.7d0c6ych.sw/#build-configuration","text":"The build configuration section specifies the final name of the project and the plugins used. The plugins include the maven-war-plugin , maven-compiler-plugin , maven-surefire-plugin , and jetty-maven-plugin . Each plugin is defined by its group ID, artifact ID, version, and configuration. build finalName booking-faces /finalName plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-war-plugin /artifactId version 3.1.0 /version configuration failOnMissingWebXml false /failOnMissingWebXml /configuration /plugin plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.7.0 /version configuration source 17 /source target 17 /target /configuration /plugin plugin This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Build Configuration"},{"location":"maven-configuration-in-booking-mvc.l0gs86gz.sw/","text":"This document provides a detailed walkthrough of how Maven is used in the booking-mvc module of the Spring Web Flow samples repository. Project Information The pom.xml file starts by defining the project information. It specifies the model version, group ID, artifact ID, packaging type, name, and version of the project. It also defines the parent project, which is spring-webflow-samples . ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId booking-mvc /artifactId packaging war /packaging name Hotel Booking : Spring MVC + Web Flow + JSP /name version 1.0.0.BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent Dependencies This section of the pom.xml file lists all the dependencies required for the booking-mvc module. These dependencies include various Spring modules, Servlet API, JSP API, Thymeleaf, Hibernate, Joda Time, Logging, and Testing libraries. dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-jdbc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-orm /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-webflow /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId Build Configuration The build configuration section specifies the final name of the build output and the plugins used during the build process. The plugins include the Maven WAR plugin, the Maven Compiler plugin, the Maven Surefire plugin, and the Jetty Maven plugin. build finalName booking-mvc /finalName plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-war-plugin /artifactId version 3.1.0 /version configuration failOnMissingWebXml false /failOnMissingWebXml /configuration /plugin plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.10.1 /version configuration source 17 /source target 17 /target /configuration /plugin plugin This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Maven Configuration in booking-mvc"},{"location":"maven-configuration-in-booking-mvc.l0gs86gz.sw/#project-information","text":"The pom.xml file starts by defining the project information. It specifies the model version, group ID, artifact ID, packaging type, name, and version of the project. It also defines the parent project, which is spring-webflow-samples . ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId booking-mvc /artifactId packaging war /packaging name Hotel Booking : Spring MVC + Web Flow + JSP /name version 1.0.0.BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent","title":"Project Information"},{"location":"maven-configuration-in-booking-mvc.l0gs86gz.sw/#dependencies","text":"This section of the pom.xml file lists all the dependencies required for the booking-mvc module. These dependencies include various Spring modules, Servlet API, JSP API, Thymeleaf, Hibernate, Joda Time, Logging, and Testing libraries. dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-jdbc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-orm /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-webflow /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId","title":"Dependencies"},{"location":"maven-configuration-in-booking-mvc.l0gs86gz.sw/#build-configuration","text":"The build configuration section specifies the final name of the build output and the plugins used during the build process. The plugins include the Maven WAR plugin, the Maven Compiler plugin, the Maven Surefire plugin, and the Jetty Maven plugin. build finalName booking-mvc /finalName plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-war-plugin /artifactId version 3.1.0 /version configuration failOnMissingWebXml false /failOnMissingWebXml /configuration /plugin plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.10.1 /version configuration source 17 /source target 17 /target /configuration /plugin plugin This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Build Configuration"},{"location":"maven-configuration-in-webflow-showcase.kfecu1qf.sw/","text":"This document provides a detailed walkthrough of how Maven is used in the webflow-showcase project. Project Information The pom.xml file starts by defining the project's basic information. The modelVersion is set to 4.0.0 , which is the standard for Maven 2 and later. The groupId , artifactId , and version together form the project's fully qualified artifact name. In this case, the artifact produced by this project will be webflow-showcase-1.0.0-BUILD-SNAPSHOT.war . ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId webflow-showcase /artifactId name Spring Web Flow Showcase /name packaging war /packaging version 1.0.0-BUILD-SNAPSHOT /version Parent Project The parent element is used to indicate this project's parent project. The parent project is spring-webflow-samples , and it's used to inherit common configurations. parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent Dependencies The dependencies section is where the project's dependencies are defined. These dependencies will be included in the classpath during compilation and can also be packaged with the application. dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-jdbc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-orm /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-webflow /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId Build Configuration The build section defines project-specific build settings. Here, two plugins are configured: maven-compiler-plugin for compiling sources and jetty-maven-plugin for running the application on Jetty server. build plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.7.0 /version configuration source 1.8 /source target 1.8 /target /configuration /plugin plugin groupId org.eclipse.jetty /groupId artifactId jetty-maven-plugin /artifactId version ${jetty-maven-plugin.version} /version configuration webApp contextPath /${project.artifactId} /contextPath /webApp /configuration /plugin This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Maven Configuration in webflow-showcase"},{"location":"maven-configuration-in-webflow-showcase.kfecu1qf.sw/#project-information","text":"The pom.xml file starts by defining the project's basic information. The modelVersion is set to 4.0.0 , which is the standard for Maven 2 and later. The groupId , artifactId , and version together form the project's fully qualified artifact name. In this case, the artifact produced by this project will be webflow-showcase-1.0.0-BUILD-SNAPSHOT.war . ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId webflow-showcase /artifactId name Spring Web Flow Showcase /name packaging war /packaging version 1.0.0-BUILD-SNAPSHOT /version","title":"Project Information"},{"location":"maven-configuration-in-webflow-showcase.kfecu1qf.sw/#parent-project","text":"The parent element is used to indicate this project's parent project. The parent project is spring-webflow-samples , and it's used to inherit common configurations. parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent","title":"Parent Project"},{"location":"maven-configuration-in-webflow-showcase.kfecu1qf.sw/#dependencies","text":"The dependencies section is where the project's dependencies are defined. These dependencies will be included in the classpath during compilation and can also be packaged with the application. dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-jdbc /artifactId /dependency dependency groupId org.springframework /groupId artifactId spring-orm /artifactId /dependency dependency groupId org.springframework.webflow /groupId artifactId spring-webflow /artifactId version ${webflow.version} /version /dependency dependency groupId org.springframework.webflow /groupId","title":"Dependencies"},{"location":"maven-configuration-in-webflow-showcase.kfecu1qf.sw/#build-configuration","text":"The build section defines project-specific build settings. Here, two plugins are configured: maven-compiler-plugin for compiling sources and jetty-maven-plugin for running the application on Jetty server. build plugins plugin groupId org.apache.maven.plugins /groupId artifactId maven-compiler-plugin /artifactId version 3.7.0 /version configuration source 1.8 /source target 1.8 /target /configuration /plugin plugin groupId org.eclipse.jetty /groupId artifactId jetty-maven-plugin /artifactId version ${jetty-maven-plugin.version} /version configuration webApp contextPath /${project.artifactId} /contextPath /webApp /configuration /plugin This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Build Configuration"},{"location":"overview-of-flows.o5m0bwpp.sw/","text":"Flows in the Spring Web Flow framework are a key abstraction for defining user interface logic. They are responsible for directing the execution of a task, such as filling out a form or navigating through a process. Each flow is defined in an XML file, which outlines the states and transitions that make up the flow. In the primefaces-showcase application, flows are used to manage various user interactions. For example, there are flows for handling AJAX requests, file uploads, form validation, and more. Each of these flows is defined in its own XML file within the 'flows' directory. Each flow XML file specifies the parent flow, which is a common flow that provides shared configuration for all the flows in the application. This parent flow is defined in the 'parent-flow.xml' file. Flow Definition This is an example of a flow definition. The flow is defined in an XML file, with the flow element as the root. The view-state element represents a state in the flow where the user interacts with the application. The transition element defines how the flow moves from one state to another based on the 'suggest' event. The evaluate element is an action that the flow performs, in this case, creating an email suggestion. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd parent= parent-flow !-- Also see ../parent-flow.xml. -- var name= userBean class= org.springframework.samples.webflow.ajax.UserBean / view-state id= view transition on= suggest evaluate expression= userBean.createEmailSuggestion(flowRequestContext) result= viewScope.emailSuggestion / /transition /view-state /flow Subflow Definition This is an example of a subflow definition. A subflow is a reusable flow that can be called from another flow. In this case, the 'embedded-flow' subflow is called from the 'main' state of the parent flow. The subflow-state element represents the state in the parent flow where the subflow is called. The input element defines an input parameter that is passed to the subflow. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd parent= parent-flow !-- Also see ../parent-flow.xml. -- view-state id= main transition on= start to= embedded-flow / /view-state subflow-state id= embedded-flow subflow= top-flow-with-embedded-subflow/embedded-flow input name= mode value= 'embedded' / transition on= end to= main / /subflow-state /flow This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Overview of Flows"},{"location":"overview-of-flows.o5m0bwpp.sw/#flow-definition","text":"This is an example of a flow definition. The flow is defined in an XML file, with the flow element as the root. The view-state element represents a state in the flow where the user interacts with the application. The transition element defines how the flow moves from one state to another based on the 'suggest' event. The evaluate element is an action that the flow performs, in this case, creating an email suggestion. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd parent= parent-flow !-- Also see ../parent-flow.xml. -- var name= userBean class= org.springframework.samples.webflow.ajax.UserBean / view-state id= view transition on= suggest evaluate expression= userBean.createEmailSuggestion(flowRequestContext) result= viewScope.emailSuggestion / /transition /view-state /flow","title":"Flow Definition"},{"location":"overview-of-flows.o5m0bwpp.sw/#subflow-definition","text":"This is an example of a subflow definition. A subflow is a reusable flow that can be called from another flow. In this case, the 'embedded-flow' subflow is called from the 'main' state of the parent flow. The subflow-state element represents the state in the parent flow where the subflow is called. The input element defines an input parameter that is passed to the subflow. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow.xsd parent= parent-flow !-- Also see ../parent-flow.xml. -- view-state id= main transition on= start to= embedded-flow / /view-state subflow-state id= embedded-flow subflow= top-flow-with-embedded-subflow/embedded-flow input name= mode value= 'embedded' / transition on= end to= main / /subflow-state /flow This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Subflow Definition"},{"location":"overview-of-the-bookingservice-interface.odr69.sw/","text":"This document will cover the BookingService interface in the Spring Web Flow samples repository. We will cover: What is BookingService . The variables and functions defined in BookingService . An example of how to use BookingService in JpaBookingService . graph TD; BookingService:::currentBaseStyle BookingService -- JpaBookingService classDef currentBaseStyle color:#000000,fill:#7CB9F4 What is BookingService BookingService is an interface in the booking-faces module of the Spring Web Flow samples repository. It defines the contract for a service that retrieves hotels and bookings from a backing repository and supports the ability to cancel a booking. Variables and functions The function findBookings is used to find bookings made by a given user. It takes a username as a parameter and returns a list of bookings made by that user. List Booking findBookings(String username); The function findHotels is used to find hotels available for booking based on some search criteria. It takes a SearchCriteria object, an index of the first result to return, a field to sort by, and a boolean indicating whether the sorting should be in ascending order. It returns a list of hotels meeting the criteria. List Hotel findHotels(SearchCriteria criteria, int firstResult, String sortBy, boolean ascending); The function findHotelById is used to find a hotel by its identifier. It takes a hotel id as a parameter and returns the corresponding hotel. Hotel findHotelById(Long id); The function createBooking is used to create a new, transient hotel booking instance for a given user. It takes a hotel id and a username as parameters and returns the new transient booking instance. Booking createBooking(Long hotelId, String userName); The function persistBooking is used to persist a booking to the database. It takes a Booking object as a parameter. void persistBooking(Booking booking); The function cancelBooking is used to cancel an existing booking. It takes a Booking object as a parameter. void cancelBooking(Booking booking); The function getNumberOfHotels is used to return the total number of hotels for the given criteria. It takes a SearchCriteria object as a parameter and returns the number of matching hotels. int getNumberOfHotels(SearchCriteria criteria); Usage example JpaBookingService is an example of how to use the BookingService interface. It is a JPA-based implementation of the BookingService that delegates to a JPA entity manager to issue data access calls against the backing repository. The EntityManager reference is provided by the managing container (Spring) automatically. @Service( bookingService ) @Repository public class JpaBookingService implements BookingService, Serializable { private static final long serialVersionUID = 1L; private EntityManager em; @PersistenceContext public void setEntityManager(EntityManager em) { this.em = em; } @Transactional(readOnly = true) @SuppressWarnings( unchecked ) public List Booking findBookings(String username) { if (username != null) { return em.createQuery( select b from Booking b where b.user.username = :username order by b.checkinDate ) .setParameter( username , username).getResultList(); } else { return null; This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Overview of the BookingService Interface in Booking Faces"},{"location":"overview-of-the-bookingservice-interface.odr69.sw/#what-is-bookingservice","text":"BookingService is an interface in the booking-faces module of the Spring Web Flow samples repository. It defines the contract for a service that retrieves hotels and bookings from a backing repository and supports the ability to cancel a booking.","title":"What is BookingService"},{"location":"overview-of-the-bookingservice-interface.odr69.sw/#variables-and-functions","text":"The function findBookings is used to find bookings made by a given user. It takes a username as a parameter and returns a list of bookings made by that user. List Booking findBookings(String username); The function findHotels is used to find hotels available for booking based on some search criteria. It takes a SearchCriteria object, an index of the first result to return, a field to sort by, and a boolean indicating whether the sorting should be in ascending order. It returns a list of hotels meeting the criteria. List Hotel findHotels(SearchCriteria criteria, int firstResult, String sortBy, boolean ascending); The function findHotelById is used to find a hotel by its identifier. It takes a hotel id as a parameter and returns the corresponding hotel. Hotel findHotelById(Long id); The function createBooking is used to create a new, transient hotel booking instance for a given user. It takes a hotel id and a username as parameters and returns the new transient booking instance. Booking createBooking(Long hotelId, String userName); The function persistBooking is used to persist a booking to the database. It takes a Booking object as a parameter. void persistBooking(Booking booking); The function cancelBooking is used to cancel an existing booking. It takes a Booking object as a parameter. void cancelBooking(Booking booking); The function getNumberOfHotels is used to return the total number of hotels for the given criteria. It takes a SearchCriteria object as a parameter and returns the number of matching hotels. int getNumberOfHotels(SearchCriteria criteria);","title":"Variables and functions"},{"location":"overview-of-the-bookingservice-interface.odr69.sw/#usage-example","text":"JpaBookingService is an example of how to use the BookingService interface. It is a JPA-based implementation of the BookingService that delegates to a JPA entity manager to issue data access calls against the backing repository. The EntityManager reference is provided by the managing container (Spring) automatically. @Service( bookingService ) @Repository public class JpaBookingService implements BookingService, Serializable { private static final long serialVersionUID = 1L; private EntityManager em; @PersistenceContext public void setEntityManager(EntityManager em) { this.em = em; } @Transactional(readOnly = true) @SuppressWarnings( unchecked ) public List Booking findBookings(String username) { if (username != null) { return em.createQuery( select b from Booking b where b.user.username = :username order by b.checkinDate ) .setParameter( username , username).getResultList(); } else { return null; This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Usage example"},{"location":"overview-of-the-primefaces-showcase.89wuctfi.sw/","text":"Primefaces showcase is a project within the Spring Web Flow samples. It demonstrates the integration of Spring Web Flow with PrimeFaces, a popular JavaServer Faces (JSF) library. The project is packaged as a war file, indicating it's a web application that can be deployed on any Java-based server. The PrimeFaces library is included as a dependency in the project's Maven configuration, allowing the project to use PrimeFaces' rich set of UI components. Primefaces Showcase Project Structure The pom.xml file defines the project structure, dependencies, and build configuration. It specifies that this is a Maven project, with a group ID of org.springframework.webflow.samples and an artifact ID of primefaces-showcase . The project is packaged as a war, and is versioned as 1.0.0-BUILD-SNAPSHOT . ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId primefaces-showcase /artifactId name Spring Web Flow and PrimeFaces Showcase /name packaging war /packaging version 1.0.0-BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId Primefaces Dependency The Primefaces library is included as a dependency in the project. The version of Primefaces used is specified by the primefaces.version property. dependency groupId org.primefaces /groupId artifactId primefaces /artifactId version ${primefaces.version} /version classifier jakarta /classifier /dependency Primefaces Version The primefaces.version property is defined in the parent pom.xml file. In this case, the version of Primefaces being used is 11.0.0 . primefaces.version 11.0.0 /primefaces.version Primefaces Showcase Endpoints Understanding Primefaces Showcase Endpoints /login Endpoint The '/login' endpoint is defined in the controllers.xml file. This endpoint is mapped to a view without any controller logic, meaning that when a user navigates to '/login', they are presented with the 'login' view. mvc:view-controller path= /login / /home Endpoint Similarly, the '/home' endpoint is also defined in the controllers.xml file. This endpoint is mapped to the 'home' view, which is displayed when a user navigates to '/home'. mvc:view-controller path= /home / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Overview of the Primefaces Showcase"},{"location":"overview-of-the-primefaces-showcase.89wuctfi.sw/#primefaces-showcase-project-structure","text":"The pom.xml file defines the project structure, dependencies, and build configuration. It specifies that this is a Maven project, with a group ID of org.springframework.webflow.samples and an artifact ID of primefaces-showcase . The project is packaged as a war, and is versioned as 1.0.0-BUILD-SNAPSHOT . ?xml version= 1.0 encoding= UTF-8 ? project xmlns= http://maven.apache.org/POM/4.0.0 xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd modelVersion 4.0.0 /modelVersion groupId org.springframework.webflow.samples /groupId artifactId primefaces-showcase /artifactId name Spring Web Flow and PrimeFaces Showcase /name packaging war /packaging version 1.0.0-BUILD-SNAPSHOT /version parent groupId org.springframework.webflow /groupId artifactId spring-webflow-samples /artifactId version 1.0.0.BUILD-SNAPSHOT /version /parent dependencies !-- Spring -- dependency groupId org.springframework /groupId artifactId spring-webmvc /artifactId","title":"Primefaces Showcase Project Structure"},{"location":"overview-of-the-primefaces-showcase.89wuctfi.sw/#primefaces-dependency","text":"The Primefaces library is included as a dependency in the project. The version of Primefaces used is specified by the primefaces.version property. dependency groupId org.primefaces /groupId artifactId primefaces /artifactId version ${primefaces.version} /version classifier jakarta /classifier /dependency","title":"Primefaces Dependency"},{"location":"overview-of-the-primefaces-showcase.89wuctfi.sw/#primefaces-version","text":"The primefaces.version property is defined in the parent pom.xml file. In this case, the version of Primefaces being used is 11.0.0 . primefaces.version 11.0.0 /primefaces.version","title":"Primefaces Version"},{"location":"overview-of-the-primefaces-showcase.89wuctfi.sw/#primefaces-showcase-endpoints","text":"Understanding Primefaces Showcase Endpoints","title":"Primefaces Showcase Endpoints"},{"location":"overview-of-the-primefaces-showcase.89wuctfi.sw/#login-endpoint","text":"The '/login' endpoint is defined in the controllers.xml file. This endpoint is mapped to a view without any controller logic, meaning that when a user navigates to '/login', they are presented with the 'login' view. mvc:view-controller path= /login /","title":"/login Endpoint"},{"location":"overview-of-the-primefaces-showcase.89wuctfi.sw/#home-endpoint","text":"Similarly, the '/home' endpoint is also defined in the controllers.xml file. This endpoint is mapped to the 'home' view, which is displayed when a user navigates to '/home'. mvc:view-controller path= /home / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"/home Endpoint"},{"location":"overview-of-webapp.uevhj0up.sw/","text":"Webapp in the booking-mvc project refers to the web application's resources. It contains all the necessary files for the web application to function properly. This includes HTML files for the user interface, CSS files for styling, images for visual elements, and configuration files in the WEB-INF directory. HTML Files This is an example of an HTML file in the Webapp directory. It contains a form for entering booking details. form id= booking action= # th:object= ${booking} th:action= ${flowExecutionUrl} method= post div class= error th:if= ${#fields.hasErrors('*')} CSS Stylesheets This is an example of a CSS stylesheet in the Webapp directory. It defines the styles for various elements in the web application. a,a:visited,a:link,a:active { color: #59924B; background-color: transparent; text-decoration: none; font-weight: bold; } a:hover { color: white; background-color: #65a242; text-decoration: none; font-weight: bold; } button { color: #fff; background: #fff url(../images/btn.bg.gif) 0 0 repeat-x; border-style: none; } Configuration Files This is an example of a configuration file in the Webapp directory. It defines the flow of the booking process in the web application. xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd secured attributes= ROLE_USER / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Overview of Webapp"},{"location":"overview-of-webapp.uevhj0up.sw/#html-files","text":"This is an example of an HTML file in the Webapp directory. It contains a form for entering booking details. form id= booking action= # th:object= ${booking} th:action= ${flowExecutionUrl} method= post div class= error th:if= ${#fields.hasErrors('*')}","title":"HTML Files"},{"location":"overview-of-webapp.uevhj0up.sw/#css-stylesheets","text":"This is an example of a CSS stylesheet in the Webapp directory. It defines the styles for various elements in the web application. a,a:visited,a:link,a:active { color: #59924B; background-color: transparent; text-decoration: none; font-weight: bold; } a:hover { color: white; background-color: #65a242; text-decoration: none; font-weight: bold; } button { color: #fff; background: #fff url(../images/btn.bg.gif) 0 0 repeat-x; border-style: none; }","title":"CSS Stylesheets"},{"location":"overview-of-webapp.uevhj0up.sw/#configuration-files","text":"This is an example of a configuration file in the Webapp directory. It defines the flow of the booking process in the web application. xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd secured attributes= ROLE_USER / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Configuration Files"},{"location":"row-count-retrieval-process.a2lj9itv.sw/","text":"This document will cover the process of retrieving the row count in the HotelLazyDataModel, which includes: Invoking the getRowCount function Calling the getNumberOfHotels function Utilizing the getSearchPattern function Accessing the getSearchString function. graph TD; subgraph booking-faces/src/main/java/org/springframework/webflow/samples/booking getRowCount:::mainFlowStyle -- getNumberOfHotels end subgraph booking-faces/src/main/java/org/springframework/webflow/samples/booking getNumberOfHotels:::mainFlowStyle -- getSearchPattern end subgraph booking-faces/src/main/java/org/springframework/webflow/samples/booking getSearchPattern:::mainFlowStyle -- getSearchString end getSearchString:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 Invoking the getRowCount function The getRowCount function is the starting point of this flow. It is responsible for initiating the process of retrieving the number of rows (hotels) based on certain search criteria. package org.springframework.webflow.samples.booking; Calling the getNumberOfHotels function The getNumberOfHotels function is called next. It takes a SearchCriteria object as an argument and uses it to generate a search pattern. This function then executes a query to count the number of hotels that match the search pattern. @Transactional(readOnly = true) public int getNumberOfHotels(SearchCriteria criteria) { String pattern = getSearchPattern(criteria); Long count = (Long) em .createQuery( select count(h.id) from Hotel h where lower(h.name) like :pattern or lower(h.city) like :pattern + or lower(h.zip) like :pattern or lower(h.address) like :pattern ) .setParameter( pattern , pattern).getSingleResult(); return count.intValue(); } Utilizing the getSearchPattern function The getSearchPattern function is used within getNumberOfHotels to generate a search pattern based on the SearchCriteria . If the search string is not empty, it is transformed into a pattern suitable for the query. If it is empty, a wildcard pattern is returned. // helpers private String getSearchPattern(SearchCriteria criteria) { if (StringUtils.hasText(criteria.getSearchString())) { return % + criteria.getSearchString().toLowerCase().replace('*', '%') + % ; } else { return % ; } } Accessing the getSearchString function The getSearchString function is a simple getter method in the SearchCriteria class. It returns the search string that is used to generate the search pattern in getSearchPattern . public String getSearchString() { return searchString; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Row Count Retrieval Process"},{"location":"row-count-retrieval-process.a2lj9itv.sw/#invoking-the-getrowcount-function","text":"The getRowCount function is the starting point of this flow. It is responsible for initiating the process of retrieving the number of rows (hotels) based on certain search criteria. package org.springframework.webflow.samples.booking;","title":"Invoking the getRowCount function"},{"location":"row-count-retrieval-process.a2lj9itv.sw/#calling-the-getnumberofhotels-function","text":"The getNumberOfHotels function is called next. It takes a SearchCriteria object as an argument and uses it to generate a search pattern. This function then executes a query to count the number of hotels that match the search pattern. @Transactional(readOnly = true) public int getNumberOfHotels(SearchCriteria criteria) { String pattern = getSearchPattern(criteria); Long count = (Long) em .createQuery( select count(h.id) from Hotel h where lower(h.name) like :pattern or lower(h.city) like :pattern + or lower(h.zip) like :pattern or lower(h.address) like :pattern ) .setParameter( pattern , pattern).getSingleResult(); return count.intValue(); }","title":"Calling the getNumberOfHotels function"},{"location":"row-count-retrieval-process.a2lj9itv.sw/#utilizing-the-getsearchpattern-function","text":"The getSearchPattern function is used within getNumberOfHotels to generate a search pattern based on the SearchCriteria . If the search string is not empty, it is transformed into a pattern suitable for the query. If it is empty, a wildcard pattern is returned. // helpers private String getSearchPattern(SearchCriteria criteria) { if (StringUtils.hasText(criteria.getSearchString())) { return % + criteria.getSearchString().toLowerCase().replace('*', '%') + % ; } else { return % ; } }","title":"Utilizing the getSearchPattern function"},{"location":"row-count-retrieval-process.a2lj9itv.sw/#accessing-the-getsearchstring-function","text":"The getSearchString function is a simple getter method in the SearchCriteria class. It returns the search string that is used to generate the search pattern in getSearchPattern . public String getSearchString() { return searchString; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Accessing the getSearchString function"},{"location":"test-booking-flow.j7ztpskm.sw/","text":"This document will cover the process of creating a test booking in the Spring Web Flow samples project. The process includes: Starting the test booking flow Creating a test booking Setting the ID for the booking. graph TD; subgraph booking-mvc/src testStartBookingFlow:::mainFlowStyle -- createTestBooking end subgraph booking-mvc/src createTestBooking:::mainFlowStyle -- setId end setId:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 Starting the Test Booking Flow The testStartBookingFlow function initiates the process of creating a test booking. It's the entry point for this flow. package org.springframework.webflow.samples.booking; import org.easymock.EasyMock; import org.springframework.webflow.config.FlowDefinitionResource; import org.springframework.webflow.config.FlowDefinitionResourceFactory; import org.springframework.webflow.core.collection.LocalAttributeMap; import org.springframework.webflow.core.collection.MutableAttributeMap; import org.springframework.webflow.test.MockExternalContext; import org.springframework.webflow.test.MockFlowBuilderContext; import org.springframework.webflow.test.execution.AbstractXmlFlowExecutionTests; public class BookingFlowExecutionTests extends AbstractXmlFlowExecutionTests { private BookingService bookingService; protected void setUp() { bookingService = EasyMock.createMock(BookingService.class); } @Override protected FlowDefinitionResource getResource(FlowDefinitionResourceFactory resourceFactory) { Creating a Test Booking The createTestBooking function is called within the testStartBookingFlow function. It creates a new Booking object with a Hotel and a User . private Booking createTestBooking() { Hotel hotel = new Hotel(); hotel.setId(1L); hotel.setName( Jameson Inn ); User user = new User( keith , pass , Keith Donald ); Booking booking = new Booking(hotel, user); return booking; } Setting the ID for the Booking The setId function is called within the createTestBooking function. It sets the ID for the Booking object. public void setId(Long id) { this.id = id; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Test Booking Flow"},{"location":"test-booking-flow.j7ztpskm.sw/#starting-the-test-booking-flow","text":"The testStartBookingFlow function initiates the process of creating a test booking. It's the entry point for this flow. package org.springframework.webflow.samples.booking; import org.easymock.EasyMock; import org.springframework.webflow.config.FlowDefinitionResource; import org.springframework.webflow.config.FlowDefinitionResourceFactory; import org.springframework.webflow.core.collection.LocalAttributeMap; import org.springframework.webflow.core.collection.MutableAttributeMap; import org.springframework.webflow.test.MockExternalContext; import org.springframework.webflow.test.MockFlowBuilderContext; import org.springframework.webflow.test.execution.AbstractXmlFlowExecutionTests; public class BookingFlowExecutionTests extends AbstractXmlFlowExecutionTests { private BookingService bookingService; protected void setUp() { bookingService = EasyMock.createMock(BookingService.class); } @Override protected FlowDefinitionResource getResource(FlowDefinitionResourceFactory resourceFactory) {","title":"Starting the Test Booking Flow"},{"location":"test-booking-flow.j7ztpskm.sw/#creating-a-test-booking","text":"The createTestBooking function is called within the testStartBookingFlow function. It creates a new Booking object with a Hotel and a User . private Booking createTestBooking() { Hotel hotel = new Hotel(); hotel.setId(1L); hotel.setName( Jameson Inn ); User user = new User( keith , pass , Keith Donald ); Booking booking = new Booking(hotel, user); return booking; }","title":"Creating a Test Booking"},{"location":"test-booking-flow.j7ztpskm.sw/#setting-the-id-for-the-booking","text":"The setId function is called within the createTestBooking function. It sets the ID for the Booking object. public void setId(Long id) { this.id = id; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Setting the ID for the Booking"},{"location":"total-booking-duration-calculation.3h3vsedq.sw/","text":"This document will cover the process of calculating the total booking duration in the Spring Web Flow samples project. The process involves the following steps: Invoking the getTotal function Calling the getNights function Utilizing the getTime function. graph TD; getTotal:::mainFlowStyle -- getNights getNights:::mainFlowStyle -- getTime getTime:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 Invoking the getTotal function The getTotal function is the starting point of this flow. It's responsible for initiating the process of calculating the total booking duration. package org.springframework.webflow.samples.booking; Calling the getNights function The getNights function is called within getTotal . It calculates the number of nights between the check-in and check-out dates. If either date is null, it returns 0. Otherwise, it calculates the difference in days between the two dates. @Transient public int getNights() { if (checkinDate == null || checkoutDate == null) { return 0; } else { return (int) (checkoutDate.getTime() - checkinDate.getTime()) / 1000 / 60 / 60 / 24; } } Utilizing the getTime function The getTime function is used within getNights to get the current time. This function returns a new Date object representing the current date and time. public Date getTime() { return new Date(); } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Total Booking Duration Calculation"},{"location":"total-booking-duration-calculation.3h3vsedq.sw/#invoking-the-gettotal-function","text":"The getTotal function is the starting point of this flow. It's responsible for initiating the process of calculating the total booking duration. package org.springframework.webflow.samples.booking;","title":"Invoking the getTotal function"},{"location":"total-booking-duration-calculation.3h3vsedq.sw/#calling-the-getnights-function","text":"The getNights function is called within getTotal . It calculates the number of nights between the check-in and check-out dates. If either date is null, it returns 0. Otherwise, it calculates the difference in days between the two dates. @Transient public int getNights() { if (checkinDate == null || checkoutDate == null) { return 0; } else { return (int) (checkoutDate.getTime() - checkinDate.getTime()) / 1000 / 60 / 60 / 24; } }","title":"Calling the getNights function"},{"location":"total-booking-duration-calculation.3h3vsedq.sw/#utilizing-the-gettime-function","text":"The getTime function is used within getNights to get the current time. This function returns a new Date object representing the current date and time. public Date getTime() { return new Date(); } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Utilizing the getTime function"},{"location":"understanding-entities-in-the-booking-mvc-module.hlppwuvf.sw/","text":"Entities in the booking-mvc module of the spring-webflow-samples project refer to the data objects that are persisted in the database. They are annotated with the @Entity annotation, which marks the class as a JPA entity. Examples of entities in this project include the User, Hotel, and Booking classes. The User entity represents a user who can book hotels, the Hotel entity represents a hotel where users may book stays, and the Booking entity represents a hotel booking made by a user. These entities are used throughout the application, for example, in the JpaBookingService class for creating bookings, and in the SecurityConfig class for setting up in-memory user details for authentication. User Entity The User entity represents a user of the application. It has properties for username, password, and name. It is annotated with @Entity, indicating that it is a JPA entity and should be mapped to a database table. * A user who can book hotels. */ @Entity @Table(name = Customer ) public class User implements Serializable { private String username; private String password; private String name; public User() { } public User(String username, String password, String name) { this.username = username; this.password = password; this.name = name; } @Id Hotel Entity The Hotel entity represents a hotel. It has properties for id, name, address, city, state, zip, country, and price. It is also annotated with @Entity. /** * A hotel where users may book stays. */ @Entity public class Hotel implements Serializable { private Long id; private String name; private String address; private String city; private String state; private String zip; private String country; private BigDecimal price; Booking Entity The Booking entity represents a booking made by a user for a hotel. It has properties for id, user, hotel, checkinDate, checkoutDate, creditCard, creditCardName, creditCardExpiryMonth, creditCardExpiryYear, smoking, beds, and amenities. It is also annotated with @Entity. /** * A Hotel Booking made by a User. */ @Entity @BookingDateRange public class Booking implements Serializable { private Long id; private User user; private Hotel hotel; @DateTimeFormat(pattern = MM-dd-yyyy ) private Date checkinDate; @DateTimeFormat(pattern = MM-dd-yyyy ) private Date checkoutDate; private String creditCard; Booking Service The BookingService interface defines the operations that can be performed on bookings. It includes methods to find bookings, find hotels, create bookings, persist bookings, and cancel bookings. package org.springframework.webflow.samples.booking; import java.util.List; /** * A service interface for retrieving hotels and bookings from a backing repository. Also supports the ability to cancel * a booking. */ public interface BookingService { /** * Find bookings made by the given user * @param username the user's name * @return their bookings */ List Booking findBookings(String username); /** * Find hotels available for booking by some criteria. * @param criteria the search criteria * @return a list of hotels meeting the criteria JPA Booking Service The JpaBookingService class is a JPA-based implementation of the BookingService interface. It uses an EntityManager to perform the operations on the entities. package org.springframework.webflow.samples.booking; import java.util.List; import jakarta.persistence.EntityManager; import jakarta.persistence.PersistenceContext; import org.springframework.stereotype.Repository; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import org.springframework.util.StringUtils; /** * A JPA-based implementation of the Booking Service. Delegates to a JPA entity manager to issue data access calls * against the backing repository. The EntityManager reference is provided by the managing container (Spring) * automatically. */ @Service( bookingService ) @Repository public class JpaBookingService implements BookingService { This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Understanding Entities in the Booking MVC Module"},{"location":"understanding-entities-in-the-booking-mvc-module.hlppwuvf.sw/#user-entity","text":"The User entity represents a user of the application. It has properties for username, password, and name. It is annotated with @Entity, indicating that it is a JPA entity and should be mapped to a database table. * A user who can book hotels. */ @Entity @Table(name = Customer ) public class User implements Serializable { private String username; private String password; private String name; public User() { } public User(String username, String password, String name) { this.username = username; this.password = password; this.name = name; } @Id","title":"User Entity"},{"location":"understanding-entities-in-the-booking-mvc-module.hlppwuvf.sw/#hotel-entity","text":"The Hotel entity represents a hotel. It has properties for id, name, address, city, state, zip, country, and price. It is also annotated with @Entity. /** * A hotel where users may book stays. */ @Entity public class Hotel implements Serializable { private Long id; private String name; private String address; private String city; private String state; private String zip; private String country; private BigDecimal price;","title":"Hotel Entity"},{"location":"understanding-entities-in-the-booking-mvc-module.hlppwuvf.sw/#booking-entity","text":"The Booking entity represents a booking made by a user for a hotel. It has properties for id, user, hotel, checkinDate, checkoutDate, creditCard, creditCardName, creditCardExpiryMonth, creditCardExpiryYear, smoking, beds, and amenities. It is also annotated with @Entity. /** * A Hotel Booking made by a User. */ @Entity @BookingDateRange public class Booking implements Serializable { private Long id; private User user; private Hotel hotel; @DateTimeFormat(pattern = MM-dd-yyyy ) private Date checkinDate; @DateTimeFormat(pattern = MM-dd-yyyy ) private Date checkoutDate; private String creditCard;","title":"Booking Entity"},{"location":"understanding-entities-in-the-booking-mvc-module.hlppwuvf.sw/#booking-service","text":"The BookingService interface defines the operations that can be performed on bookings. It includes methods to find bookings, find hotels, create bookings, persist bookings, and cancel bookings. package org.springframework.webflow.samples.booking; import java.util.List; /** * A service interface for retrieving hotels and bookings from a backing repository. Also supports the ability to cancel * a booking. */ public interface BookingService { /** * Find bookings made by the given user * @param username the user's name * @return their bookings */ List Booking findBookings(String username); /** * Find hotels available for booking by some criteria. * @param criteria the search criteria * @return a list of hotels meeting the criteria","title":"Booking Service"},{"location":"understanding-entities-in-the-booking-mvc-module.hlppwuvf.sw/#jpa-booking-service","text":"The JpaBookingService class is a JPA-based implementation of the BookingService interface. It uses an EntityManager to perform the operations on the entities. package org.springframework.webflow.samples.booking; import java.util.List; import jakarta.persistence.EntityManager; import jakarta.persistence.PersistenceContext; import org.springframework.stereotype.Repository; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import org.springframework.util.StringUtils; /** * A JPA-based implementation of the Booking Service. Delegates to a JPA entity manager to issue data access calls * against the backing repository. The EntityManager reference is provided by the managing container (Spring) * automatically. */ @Service( bookingService ) @Repository public class JpaBookingService implements BookingService { This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"JPA Booking Service"},{"location":"understanding-layouts.fi7axji6.sw/","text":"Layouts in the primefaces-showcase/src/main/webapp/WEB-INF/layouts directory refer to the structure and arrangement of visual elements in the application. They define the overall appearance of the application and how the components are organized and interact with each other. The standard.xhtml file, for example, is a layout file that defines the standard structure of a page in the application, including the head and body sections, and placeholders for inserting specific content. Layout File Structure This is an example of a layout file in the application. It defines the common structure of the pages, including the head and body sections. The ui:insert tags are placeholders where unique content will be inserted for each page. ?xml version= 1.0 encoding= UTF-8 ? !DOCTYPE html PUBLIC -//W3C//DTD XHTML 1.0 Transitional//EN https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd html xmlns= http://www.w3.org/1999/xhtml xmlns:h= http://java.sun.com/jsf/html xmlns:f= http://java.sun.com/jsf/core xmlns:ui= http://java.sun.com/jsf/facelets xmlns:p= http://primefaces.org/ui f:view contentType= text/html h:head meta http-equiv= Content-Type content= text/html; charset=UTF-8 / title JSF 2, Spring Web Flow, and PrimeFaces Showcase /title link rel= stylesheet href= ${request.contextPath}/app/resources/styles/blueprint/screen.css type= text/css media= screen, projection / link rel= stylesheet href= ${request.contextPath}/app/resources/styles/blueprint/print.css type= text/css media= print / !--[if lt IE 8] link rel= stylesheet href= ${request.servletPath}/styles/blueprint/ie.css type= text/css media= screen, projection / ![endif]-- ui:insert name= headIncludes / /h:head h:body div class= container div Using the Layout To use this layout in a page, you would use the ui:composition tag and specify the layout file as the template. Then, within the ui:define tags, you would specify the unique content for that page, matching the names of the ui:insert tags in the layout file. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Understanding Layouts"},{"location":"understanding-layouts.fi7axji6.sw/#layout-file-structure","text":"This is an example of a layout file in the application. It defines the common structure of the pages, including the head and body sections. The ui:insert tags are placeholders where unique content will be inserted for each page. ?xml version= 1.0 encoding= UTF-8 ? !DOCTYPE html PUBLIC -//W3C//DTD XHTML 1.0 Transitional//EN https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd html xmlns= http://www.w3.org/1999/xhtml xmlns:h= http://java.sun.com/jsf/html xmlns:f= http://java.sun.com/jsf/core xmlns:ui= http://java.sun.com/jsf/facelets xmlns:p= http://primefaces.org/ui f:view contentType= text/html h:head meta http-equiv= Content-Type content= text/html; charset=UTF-8 / title JSF 2, Spring Web Flow, and PrimeFaces Showcase /title link rel= stylesheet href= ${request.contextPath}/app/resources/styles/blueprint/screen.css type= text/css media= screen, projection / link rel= stylesheet href= ${request.contextPath}/app/resources/styles/blueprint/print.css type= text/css media= print / !--[if lt IE 8] link rel= stylesheet href= ${request.servletPath}/styles/blueprint/ie.css type= text/css media= screen, projection / ![endif]-- ui:insert name= headIncludes / /h:head h:body div class= container div","title":"Layout File Structure"},{"location":"understanding-layouts.fi7axji6.sw/#using-the-layout","text":"To use this layout in a page, you would use the ui:composition tag and specify the layout file as the template. Then, within the ui:define tags, you would specify the unique content for that page, matching the names of the ui:insert tags in the layout file. This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Using the Layout"},{"location":"understanding-spring-in-the-primefaces-showcase-project.wam76lqv.sw/","text":"Spring in the primefaces-showcase project refers to the Spring Framework, a powerful Java framework used for building enterprise-grade applications. It provides a comprehensive programming and configuration model. In the servlet-context.xml file, Spring is used to enable the Spring MVC @Controller programming model and to serve classpath resources. This allows for the creation of web applications with less configuration and easy resource management. In the webflow.xml file, Spring is used to execute flows, which is the central entry point into the Spring Web Flow system. It also configures the Spring Web Flow JSF integration and applies Spring Security authorities. This allows for the creation of complex user interfaces in a web application. Spring Configuration Files This is the Spring configuration file for controllers. It defines URL mappings for views and scans for components in the specified package. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:mvc= http://www.springframework.org/schema/mvc xmlns:context= http://www.springframework.org/schema/context xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd !-- URL mappings for views without controller logic. Example: Incoming path '/home' is mapped maps to the view name 'home' UrlBasedViewResolver in servlet-context resolves 'home' to /WEB-INF/views/home.xhtml -- mvc:view-controller path= /login / mvc:view-controller path= /home / bean name= mvcHandlerMappingIntrospector class= org.springframework.web.servlet.handler.HandlerMappingIntrospector / Spring Security Configuration This is the Spring Security configuration file. It defines security constraints for different URL patterns and user roles. ?xml version= 1.0 encoding= UTF-8 ? b:beans xmlns= http://www.springframework.org/schema/security xmlns:b= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd b:bean id= expressionHandler class= org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler / http auto-config= true form-login login-page= /app/login login-processing-url= /app/loginProcess default-target-url= /app/home authentication-failure-url= /app/login?login_error=1 / logout logout-url= /app/logout logout-success-url= /app/home / intercept-url pattern= /secured/appleUser method= POST access= hasRole('ROLE_APPLE_USER') / intercept-url pattern= /secured/androidUser method= POST access= hasRole('ROLE_ANDROID_USER') / intercept-url pattern= /** access= permitAll / csrf disabled= true / /http user-service Spring Web Flow Configuration This is the Spring Web Flow configuration file. It defines the flow executor and registry, and configures the Spring Web Flow JSF integration. ?xml version= 1.0 encoding= UTF-8 ? beans:beans xmlns= http://www.springframework.org/schema/webflow-config xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:beans= http://www.springframework.org/schema/beans xmlns:faces= http://www.springframework.org/schema/faces xsi:schemaLocation= http://www.springframework.org/schema/webflow-config https://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/faces https://www.springframework.org/schema/faces/spring-faces.xsd !-- Executes flows: the central entry point into the Spring Web Flow system -- flow-executor id= flowExecutor flow-execution-listeners listener ref= facesContextListener / listener ref= securityListener / /flow-execution-listeners /flow-executor !-- The registry of executable flow definitions -- flow-registry id= flowRegistry flow-builder-services= flowBuilderServices base-path= /WEB-INF/flows flow-location-pattern value= /**/flow.xml / flow-location id= parent-flow path= parent-flow.xml / Spring Servlet Context Configuration This is the Spring Servlet Context configuration file. It defines the DispatcherServlet's request-processing infrastructure, imports user-defined @Controller beans, and enables the Spring MVC @Controller programming model. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:mvc= http://www.springframework.org/schema/mvc xmlns:faces= http://www.springframework.org/schema/faces xmlns:context= http://www.springframework.org/schema/context xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/faces https://www.springframework.org/schema/faces/spring-faces.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd !-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -- !-- Imports user-defined @Controller beans that process client requests -- import resource= controllers.xml / import resource= webflow.xml / !-- Scan for Spring beans declared via annotations. -- context:component-scan base-package= org.springframework.samples.webflow / Spring Root Context Configuration This is the Spring Root Context configuration file. It defines shared resources visible to all other web components. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd !-- Root Context: defines shared resources visible to all other web components -- import resource= security-config.xml / import resource= servlet-context.xml / /beans Spring Endpoints Spring Framework Endpoints /login Endpoint The /login endpoint is defined here. It is mapped to a view-controller, which means that when this endpoint is accessed, Spring will direct the user to the corresponding view without any additional controller logic. mvc:view-controller path= /login / /home Endpoint The /home endpoint is defined here. Similar to the /login endpoint, it is mapped to a view-controller. When this endpoint is accessed, the user is directed to the corresponding view. mvc:view-controller path= /home / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Understanding Spring in the Primefaces-Showcase Project"},{"location":"understanding-spring-in-the-primefaces-showcase-project.wam76lqv.sw/#spring-configuration-files","text":"This is the Spring configuration file for controllers. It defines URL mappings for views and scans for components in the specified package. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:mvc= http://www.springframework.org/schema/mvc xmlns:context= http://www.springframework.org/schema/context xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd !-- URL mappings for views without controller logic. Example: Incoming path '/home' is mapped maps to the view name 'home' UrlBasedViewResolver in servlet-context resolves 'home' to /WEB-INF/views/home.xhtml -- mvc:view-controller path= /login / mvc:view-controller path= /home / bean name= mvcHandlerMappingIntrospector class= org.springframework.web.servlet.handler.HandlerMappingIntrospector /","title":"Spring Configuration Files"},{"location":"understanding-spring-in-the-primefaces-showcase-project.wam76lqv.sw/#spring-security-configuration","text":"This is the Spring Security configuration file. It defines security constraints for different URL patterns and user roles. ?xml version= 1.0 encoding= UTF-8 ? b:beans xmlns= http://www.springframework.org/schema/security xmlns:b= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd b:bean id= expressionHandler class= org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler / http auto-config= true form-login login-page= /app/login login-processing-url= /app/loginProcess default-target-url= /app/home authentication-failure-url= /app/login?login_error=1 / logout logout-url= /app/logout logout-success-url= /app/home / intercept-url pattern= /secured/appleUser method= POST access= hasRole('ROLE_APPLE_USER') / intercept-url pattern= /secured/androidUser method= POST access= hasRole('ROLE_ANDROID_USER') / intercept-url pattern= /** access= permitAll / csrf disabled= true / /http user-service","title":"Spring Security Configuration"},{"location":"understanding-spring-in-the-primefaces-showcase-project.wam76lqv.sw/#spring-web-flow-configuration","text":"This is the Spring Web Flow configuration file. It defines the flow executor and registry, and configures the Spring Web Flow JSF integration. ?xml version= 1.0 encoding= UTF-8 ? beans:beans xmlns= http://www.springframework.org/schema/webflow-config xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:beans= http://www.springframework.org/schema/beans xmlns:faces= http://www.springframework.org/schema/faces xsi:schemaLocation= http://www.springframework.org/schema/webflow-config https://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/faces https://www.springframework.org/schema/faces/spring-faces.xsd !-- Executes flows: the central entry point into the Spring Web Flow system -- flow-executor id= flowExecutor flow-execution-listeners listener ref= facesContextListener / listener ref= securityListener / /flow-execution-listeners /flow-executor !-- The registry of executable flow definitions -- flow-registry id= flowRegistry flow-builder-services= flowBuilderServices base-path= /WEB-INF/flows flow-location-pattern value= /**/flow.xml / flow-location id= parent-flow path= parent-flow.xml /","title":"Spring Web Flow Configuration"},{"location":"understanding-spring-in-the-primefaces-showcase-project.wam76lqv.sw/#spring-servlet-context-configuration","text":"This is the Spring Servlet Context configuration file. It defines the DispatcherServlet's request-processing infrastructure, imports user-defined @Controller beans, and enables the Spring MVC @Controller programming model. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xmlns:mvc= http://www.springframework.org/schema/mvc xmlns:faces= http://www.springframework.org/schema/faces xmlns:context= http://www.springframework.org/schema/context xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/faces https://www.springframework.org/schema/faces/spring-faces.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd !-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -- !-- Imports user-defined @Controller beans that process client requests -- import resource= controllers.xml / import resource= webflow.xml / !-- Scan for Spring beans declared via annotations. -- context:component-scan base-package= org.springframework.samples.webflow /","title":"Spring Servlet Context Configuration"},{"location":"understanding-spring-in-the-primefaces-showcase-project.wam76lqv.sw/#spring-root-context-configuration","text":"This is the Spring Root Context configuration file. It defines shared resources visible to all other web components. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= http://www.springframework.org/schema/beans xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd !-- Root Context: defines shared resources visible to all other web components -- import resource= security-config.xml / import resource= servlet-context.xml / /beans","title":"Spring Root Context Configuration"},{"location":"understanding-spring-in-the-primefaces-showcase-project.wam76lqv.sw/#spring-endpoints","text":"Spring Framework Endpoints","title":"Spring Endpoints"},{"location":"understanding-spring-in-the-primefaces-showcase-project.wam76lqv.sw/#login-endpoint","text":"The /login endpoint is defined here. It is mapped to a view-controller, which means that when this endpoint is accessed, Spring will direct the user to the corresponding view without any additional controller logic. mvc:view-controller path= /login /","title":"/login Endpoint"},{"location":"understanding-spring-in-the-primefaces-showcase-project.wam76lqv.sw/#home-endpoint","text":"The /home endpoint is defined here. Similar to the /login endpoint, it is mapped to a view-controller. When this endpoint is accessed, the user is directed to the corresponding view. mvc:view-controller path= /home / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"/home Endpoint"},{"location":"understanding-the-basic-concepts-of-a-webapp.3xhhllno.sw/","text":"Webapp in the booking-faces project refers to the main directory that contains all the resources needed for the web application. It includes HTML, CSS, images, and configuration files. The WEB-INF directory within the webapp directory is a container for resources such as XML configuration files and XHTML files that define the application's user interface. The styles directory contains CSS files and themes for the application's visual appearance, while the images directory holds the image files used in the application. The META-INF directory contains metadata about the application, such as the MANIFEST.MF file. The index.html file in the webapp directory is the entry point of the application, which redirects to the 'intro' page. HTML Files The index.html file is the entry point of the web application. It redirects the user to the spring/intro URL. html head meta http-equiv= Refresh content= 0; URL=spring/intro /head /html Stylesheets The booking.css file contains the CSS styles for the web application. It defines styles for various classes and selectors, such as .summary and label . .summary { width: 100%; border: 1px solid #414f23; Configuration Files Configuration files such as beans.xml are stored in the WEB-INF directory. These files are used to configure various aspects of the Spring application. ?xml version= 1.0 encoding= UTF-8 ? This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Understanding the Basic Concepts of a Webapp"},{"location":"understanding-the-basic-concepts-of-a-webapp.3xhhllno.sw/#html-files","text":"The index.html file is the entry point of the web application. It redirects the user to the spring/intro URL. html head meta http-equiv= Refresh content= 0; URL=spring/intro /head /html","title":"HTML Files"},{"location":"understanding-the-basic-concepts-of-a-webapp.3xhhllno.sw/#stylesheets","text":"The booking.css file contains the CSS styles for the web application. It defines styles for various classes and selectors, such as .summary and label . .summary { width: 100%; border: 1px solid #414f23;","title":"Stylesheets"},{"location":"understanding-the-basic-concepts-of-a-webapp.3xhhllno.sw/#configuration-files","text":"Configuration files such as beans.xml are stored in the WEB-INF directory. These files are used to configure various aspects of the Spring application. ?xml version= 1.0 encoding= UTF-8 ? This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Configuration Files"},{"location":"understanding-the-role-of-web-inf-in-the-booking-faces-application.m76hti7a.sw/","text":"The WEB-INF directory in the booking-faces application is a special directory that contains resources related to the application that aren't directly served to the client. It includes configuration files, libraries, and class files. beans.xml is a configuration file used by the CDI (Contexts and Dependency Injection) container to discover beans. In this case, it's set to discover all beans. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= https://jakarta.ee/xml/ns/jakartaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd version= 3.0 bean-discovery-mode= all /beans faces-config.xml is a configuration file for JavaServer Faces (JSF) applications. It defines application-wide settings like the message bundle for localization. ?xml version='1.0' encoding='UTF-8'? faces-config xmlns= http://java.sun.com/xml/ns/javaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd version= 2.0 application message-bundle JsfMessageResources /message-bundle /application /faces-config intro.xhtml is a JSF page that uses Facelets as its templating system. It's a standalone page that provides information about the application and links to start the main flow. !DOCTYPE composition PUBLIC -//W3C//DTD XHTML 1.0 Transitional//EN https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ui:composition xmlns= http://www.w3.org/1999/xhtml xmlns:ui= http://java.sun.com/jsf/facelets xmlns:h= http://java.sun.com/jsf/html xmlns:f= http://java.sun.com/jsf/core xmlns:sf= http://www.springframework.org/tags/faces template= layouts/standard.xhtml ui:define name= notes p This is a simple standalone JSF page. /p p Clicking the Start link below will launch the main to search for hotels (see strong main-flow.xml /strong ). The main flow in turn launches the booking sub-flow to book the hotel (see strong booking-flow.xml /strong ). /p p The main flow is accessible without logging in while the booking flow requires authentication. /p /ui:define Configuration Files The faces-config.xml file is a configuration file for JSF applications. It defines application-wide settings. ?xml version='1.0' encoding='UTF-8'? faces-config xmlns= http://java.sun.com/xml/ns/javaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd version= 2.0 application message-bundle JsfMessageResources /message-bundle /application /faces-config The beans.xml file is used for configuring beans in the application. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= https://jakarta.ee/xml/ns/jakartaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd version= 3.0 bean-discovery-mode= all /beans Flow Definitions The booking-flow.xml file is an example of a flow definition file. It defines the steps involved in the booking process. ?xml version= 1.0 encoding= UTF-8 ? This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Understanding the Role of WEB-INF in the Booking-Faces Application"},{"location":"understanding-the-role-of-web-inf-in-the-booking-faces-application.m76hti7a.sw/#configuration-files","text":"The faces-config.xml file is a configuration file for JSF applications. It defines application-wide settings. ?xml version='1.0' encoding='UTF-8'? faces-config xmlns= http://java.sun.com/xml/ns/javaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd version= 2.0 application message-bundle JsfMessageResources /message-bundle /application /faces-config The beans.xml file is used for configuring beans in the application. ?xml version= 1.0 encoding= UTF-8 ? beans xmlns= https://jakarta.ee/xml/ns/jakartaee xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_3_0.xsd version= 3.0 bean-discovery-mode= all /beans","title":"Configuration Files"},{"location":"understanding-the-role-of-web-inf-in-the-booking-faces-application.m76hti7a.sw/#flow-definitions","text":"The booking-flow.xml file is an example of a flow definition file. It defines the steps involved in the booking process. ?xml version= 1.0 encoding= UTF-8 ? This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Flow Definitions"},{"location":"understanding-the-role-of-web-inf-in-web-applications.6a6x6zyp.sw/","text":"The WEB-INF directory in a web application is a location that provides a secure place to store resources such as classes, libraries, and configuration files that are used by the application. It is not accessible directly from the web and is typically used to store resources that are not intended to be served directly to a user. In the booking-mvc application, the WEB-INF directory contains HTML files that define the views of the application. These files are used by the Spring MVC framework to generate the user interface of the application. The layouts directory contains a standard layout that is used by multiple views, and the hotels directory contains views specific to the hotel booking functionality. Thymeleaf Templates This is an example of a Thymeleaf template used to generate the HTML for the review booking page. It uses Thymeleaf syntax to bind data from the model to the view. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org lang= en head th:replace= layouts/standard.html :: //head !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- !-- This head section is only used for static prototyping purposes. -- !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- Messages Properties Files This is an example of a messages properties file used to display messages in the web application. It contains key-value pairs, where the key is a message code and the value is the message text. booking.checkinDate.NotNull=The check in date is required booking.checkinDate.Future=The check in date must be in the future booking.checkinDate.beforeToday=The check in date must be a future date booking.checkinDate.typeMismatch=The check in date must be in the format mm-dd-yyyy booking.checkoutDate.Future=The check out date must be in the future booking.checkoutDate.NotNull=The check out date is required booking.checkoutDate.typeMismatch=The check out date must be in the format mm-dd-yyyy booking.BookingDateRange=The check out date must be later than the check in date Spring Web Flow Configuration Files This is an example of a Spring Web Flow configuration file. It defines the flow of the web application, including the states, transitions, and actions. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd secured attributes= ROLE_USER / input name= hotelId required= true / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Understanding the Role of WEB-INF in Web Applications"},{"location":"understanding-the-role-of-web-inf-in-web-applications.6a6x6zyp.sw/#thymeleaf-templates","text":"This is an example of a Thymeleaf template used to generate the HTML for the review booking page. It uses Thymeleaf syntax to bind data from the model to the view. !DOCTYPE html html xmlns= http://www.w3.org/1999/xhtml xmlns:th= http://www.thymeleaf.org lang= en head th:replace= layouts/standard.html :: //head !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- !-- This head section is only used for static prototyping purposes. -- !-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --","title":"Thymeleaf Templates"},{"location":"understanding-the-role-of-web-inf-in-web-applications.6a6x6zyp.sw/#messages-properties-files","text":"This is an example of a messages properties file used to display messages in the web application. It contains key-value pairs, where the key is a message code and the value is the message text. booking.checkinDate.NotNull=The check in date is required booking.checkinDate.Future=The check in date must be in the future booking.checkinDate.beforeToday=The check in date must be a future date booking.checkinDate.typeMismatch=The check in date must be in the format mm-dd-yyyy booking.checkoutDate.Future=The check out date must be in the future booking.checkoutDate.NotNull=The check out date is required booking.checkoutDate.typeMismatch=The check out date must be in the format mm-dd-yyyy booking.BookingDateRange=The check out date must be later than the check in date","title":"Messages Properties Files"},{"location":"understanding-the-role-of-web-inf-in-web-applications.6a6x6zyp.sw/#spring-web-flow-configuration-files","text":"This is an example of a Spring Web Flow configuration file. It defines the flow of the web application, including the states, transitions, and actions. ?xml version= 1.0 encoding= UTF-8 ? flow xmlns= http://www.springframework.org/schema/webflow xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://www.springframework.org/schema/webflow https://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd secured attributes= ROLE_USER / input name= hotelId required= true / This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Spring Web Flow Configuration Files"},{"location":"understanding-views-in-primefaces-showcase.8yyjy2t8.sw/","text":"Views in the spring-webflow-samples repository, specifically in the primefaces-showcase project, refer to the XHTML files that define the user interface of the web application. These files are located in the WEB-INF/views directory. They use Facelets, a view technology for JavaServer Faces (JSF), to create the UI. The views are composed of various JSF and PrimeFaces UI components, and they define the layout and functionality of the web pages. For example, the login.xhtml view defines the login form of the application. Structure of a View This is an example of a view. It uses the Facelets template language to define the structure of the page. The ui:composition tag is used to include content from a template, and the ui:define tags are used to define content for named sections of the template. !DOCTYPE composition PUBLIC -//W3C//DTD XHTML 1.0 Transitional//EN https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ui:composition xmlns= http://www.w3.org/1999/xhtml xmlns:ui= http://java.sun.com/jsf/facelets xmlns:h= http://java.sun.com/jsf/html xmlns:f= http://java.sun.com/jsf/core xmlns:p= http://primefaces.org/ui template= /WEB-INF/layouts/standard.xhtml ui:define name= title /ui:define ui:define name= notes p Note that in development mode you can make changes to flow definitions without the need to restart the server. The development mode is specified in span class= alt src/main/webapp/WEB-INF/spring/appServlet/webflow.xml /span . /p hr/ /ui:define ui:define name= content Dynamic Content in Views This part of the view defines dynamic content. The p:tabView tag is a PrimeFaces component that creates a tabbed view. The active tab is determined by the activeIndex attribute, which is bound to a request parameter. Each p:tab defines the content for a tab. p:tabView activeIndex= ${param.tab} p:tab title= Ajax 101 ul li h:outputLink value= ajax-jsf?tab=0 h:outputText value= JSF 2 commandButton with f:ajax / /h:outputLink br/ span class= alt Ajax request and responses with h:commandButton + nested f:ajax tag. /span /li li h:outputLink value= ajax-primefaces?tab=0 h:outputText value= PrimeFaces commandButton / /h:outputLink br/ span class= alt Ajax request and response with the PrimeFaces commandButton. /span /li li h:outputLink value= ajax-render-action?tab=0 h:outputText value= Web Flow render action / /h:outputLink br/ span class= alt Integration between the Web Flow render action and PrimeFaces partial rendering. /span Form Handling in Views This part of the view defines a form for user login. The form fields are bound to request parameters, and the form action is set to a URL that will handle the form submission. The form is enclosed in a p:panel component, which is a PrimeFaces component that creates a panel with a header. form name= f action= ${request.contextPath}/app/loginProcess method= post p User: br / input type= text name= username / /p p Password: br / input type= password name= password / /p p input type= checkbox name= _spring_security_remember_me / Don't ask for my password for two weeks /p p input name= submit type= submit value= Login / /p /form This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Understanding Views in PrimeFaces Showcase"},{"location":"understanding-views-in-primefaces-showcase.8yyjy2t8.sw/#structure-of-a-view","text":"This is an example of a view. It uses the Facelets template language to define the structure of the page. The ui:composition tag is used to include content from a template, and the ui:define tags are used to define content for named sections of the template. !DOCTYPE composition PUBLIC -//W3C//DTD XHTML 1.0 Transitional//EN https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd ui:composition xmlns= http://www.w3.org/1999/xhtml xmlns:ui= http://java.sun.com/jsf/facelets xmlns:h= http://java.sun.com/jsf/html xmlns:f= http://java.sun.com/jsf/core xmlns:p= http://primefaces.org/ui template= /WEB-INF/layouts/standard.xhtml ui:define name= title /ui:define ui:define name= notes p Note that in development mode you can make changes to flow definitions without the need to restart the server. The development mode is specified in span class= alt src/main/webapp/WEB-INF/spring/appServlet/webflow.xml /span . /p hr/ /ui:define ui:define name= content","title":"Structure of a View"},{"location":"understanding-views-in-primefaces-showcase.8yyjy2t8.sw/#dynamic-content-in-views","text":"This part of the view defines dynamic content. The p:tabView tag is a PrimeFaces component that creates a tabbed view. The active tab is determined by the activeIndex attribute, which is bound to a request parameter. Each p:tab defines the content for a tab. p:tabView activeIndex= ${param.tab} p:tab title= Ajax 101 ul li h:outputLink value= ajax-jsf?tab=0 h:outputText value= JSF 2 commandButton with f:ajax / /h:outputLink br/ span class= alt Ajax request and responses with h:commandButton + nested f:ajax tag. /span /li li h:outputLink value= ajax-primefaces?tab=0 h:outputText value= PrimeFaces commandButton / /h:outputLink br/ span class= alt Ajax request and response with the PrimeFaces commandButton. /span /li li h:outputLink value= ajax-render-action?tab=0 h:outputText value= Web Flow render action / /h:outputLink br/ span class= alt Integration between the Web Flow render action and PrimeFaces partial rendering. /span","title":"Dynamic Content in Views"},{"location":"understanding-views-in-primefaces-showcase.8yyjy2t8.sw/#form-handling-in-views","text":"This part of the view defines a form for user login. The form fields are bound to request parameters, and the form action is set to a URL that will handle the form submission. The form is enclosed in a p:panel component, which is a PrimeFaces component that creates a panel with a header. form name= f action= ${request.contextPath}/app/loginProcess method= post p User: br / input type= text name= username / /p p Password: br / input type= password name= password / /p p input type= checkbox name= _spring_security_remember_me / Don't ask for my password for two weeks /p p input name= submit type= submit value= Login / /p /form This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Form Handling in Views"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/","text":"Webflow in the context of the spring-webflow-samples repository refers to the Spring Web Flow framework. This framework is designed to help developers build web applications that follow a 'flow' of interactions. The 'webflow' in the package path 'org.springframework.samples.webflow' signifies that the classes within these packages are utilizing the Spring Web Flow framework. For instance, classes in the 'autocomplete', 'validation', 'ajax', 'jsf', and 'modal' packages are all part of different web flows. Webflow with JSF In this file, we see an example of how Webflow can be used with JSF. The FacesHelper class is a utility class that can be used to interact with the JSF FacesContext , which is a fundamental part of JSF. package org.springframework.samples.webflow.jsf; import jakarta.faces.context.FacesContext; import org.springframework.stereotype.Component; Webflow with Ajax This file demonstrates how Webflow can be used in conjunction with Ajax to create dynamic user interfaces. The UserBean class is a managed bean that can be used to store and retrieve user data in an Ajax-enabled JSF page. package org.springframework.samples.webflow.ajax; import java.io.Serializable; import org.springframework.binding.message.MessageBuilder; Webflow with File Upload This file shows how Webflow can be used to handle file uploads. The FileUploadController class is a controller that handles the file upload process. package org.springframework.samples.webflow.upload; import jakarta.faces.application.FacesMessage; import jakarta.faces.context.FacesContext; import org.primefaces.event.FileUploadEvent; Webflow with Validation This file demonstrates how Webflow can be used with validation. The Account class is a model class that uses JSR 303 annotations to define validation rules for its fields. package org.springframework.samples.webflow.validation; import java.io.Serializable; import java.util.Date; import jakarta.validation.constraints.NotNull; import jakarta.validation.constraints.Past; import org.hibernate.validator.constraints.NotEmpty; public class Account implements Serializable { private static final long serialVersionUID = 1L; @NotEmpty private String firstName; @NotEmpty private String lastName; @Past Spring Web Flow Functionalities This section will cover the main functionalities provided by the Spring Web Flow framework in the 'primefaces-showcase/src/main/java/org/springframework/samples/webflow' directory. UserBean Class The UserBean class is a Serializable class that represents a user within the application. It is used to store and manage user-related data. package org.springframework.samples.webflow.ajax; import java.io.Serializable; import org.springframework.binding.message.MessageBuilder; import org.springframework.util.StringUtils; import org.springframework.webflow.execution.RequestContext; public class UserBean implements Serializable { Person Class The Person class is a Serializable class that represents a person within the application. It is used to store and manage person-related data. package org.springframework.samples.webflow.autocomplete; import java.io.Serializable; public class Person implements Serializable { Reservation Class The Reservation class is a Serializable class that represents a reservation within the application. It is used to store and manage reservation-related data. package org.springframework.samples.webflow.validation; import java.io.Serializable; import java.util.Date; Account Class The Account class is a Serializable class that represents an account within the application. It is used to store and manage account-related data. package org.springframework.samples.webflow.validation; import java.io.Serializable; import java.util.Date; FormBean Class The FormBean class is a Serializable class that represents a form within the application. It is used to store and manage form-related data. package org.springframework.samples.webflow.autocomplete; import java.io.Serializable; public class FormBean implements Serializable { This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Understanding Webflow in Spring Framework"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#webflow-with-jsf","text":"In this file, we see an example of how Webflow can be used with JSF. The FacesHelper class is a utility class that can be used to interact with the JSF FacesContext , which is a fundamental part of JSF. package org.springframework.samples.webflow.jsf; import jakarta.faces.context.FacesContext; import org.springframework.stereotype.Component;","title":"Webflow with JSF"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#webflow-with-ajax","text":"This file demonstrates how Webflow can be used in conjunction with Ajax to create dynamic user interfaces. The UserBean class is a managed bean that can be used to store and retrieve user data in an Ajax-enabled JSF page. package org.springframework.samples.webflow.ajax; import java.io.Serializable; import org.springframework.binding.message.MessageBuilder;","title":"Webflow with Ajax"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#webflow-with-file-upload","text":"This file shows how Webflow can be used to handle file uploads. The FileUploadController class is a controller that handles the file upload process. package org.springframework.samples.webflow.upload; import jakarta.faces.application.FacesMessage; import jakarta.faces.context.FacesContext; import org.primefaces.event.FileUploadEvent;","title":"Webflow with File Upload"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#webflow-with-validation","text":"This file demonstrates how Webflow can be used with validation. The Account class is a model class that uses JSR 303 annotations to define validation rules for its fields. package org.springframework.samples.webflow.validation; import java.io.Serializable; import java.util.Date; import jakarta.validation.constraints.NotNull; import jakarta.validation.constraints.Past; import org.hibernate.validator.constraints.NotEmpty; public class Account implements Serializable { private static final long serialVersionUID = 1L; @NotEmpty private String firstName; @NotEmpty private String lastName; @Past","title":"Webflow with Validation"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#spring-web-flow-functionalities","text":"This section will cover the main functionalities provided by the Spring Web Flow framework in the 'primefaces-showcase/src/main/java/org/springframework/samples/webflow' directory.","title":"Spring Web Flow Functionalities"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#userbean-class","text":"The UserBean class is a Serializable class that represents a user within the application. It is used to store and manage user-related data. package org.springframework.samples.webflow.ajax; import java.io.Serializable; import org.springframework.binding.message.MessageBuilder; import org.springframework.util.StringUtils; import org.springframework.webflow.execution.RequestContext; public class UserBean implements Serializable {","title":"UserBean Class"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#person-class","text":"The Person class is a Serializable class that represents a person within the application. It is used to store and manage person-related data. package org.springframework.samples.webflow.autocomplete; import java.io.Serializable; public class Person implements Serializable {","title":"Person Class"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#reservation-class","text":"The Reservation class is a Serializable class that represents a reservation within the application. It is used to store and manage reservation-related data. package org.springframework.samples.webflow.validation; import java.io.Serializable; import java.util.Date;","title":"Reservation Class"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#account-class","text":"The Account class is a Serializable class that represents an account within the application. It is used to store and manage account-related data. package org.springframework.samples.webflow.validation; import java.io.Serializable; import java.util.Date;","title":"Account Class"},{"location":"understanding-webflow-in-spring-framework.pl67uen6.sw/#formbean-class","text":"The FormBean class is a Serializable class that represents a form within the application. It is used to store and manage form-related data. package org.springframework.samples.webflow.autocomplete; import java.io.Serializable; public class FormBean implements Serializable { This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"FormBean Class"},{"location":"web-flow-handling-process.ax7s4x6p.sw/","text":"This document will cover the process of handling web flow in the Spring Web Flow project, which includes: Initializing the flow executor Registering the flow Building the flow services Creating the MVC view factory Resolving the Thymeleaf view Setting up the template engine Resolving the template graph TD; subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config flowHandlerAdapter:::mainFlowStyle -- flowExecutor end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config flowExecutor:::mainFlowStyle -- flowRegistry end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config flowRegistry:::mainFlowStyle -- flowBuilderServices end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config flowBuilderServices:::mainFlowStyle -- mvcViewFactoryCreator end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config mvcViewFactoryCreator:::mainFlowStyle -- thymeleafViewResolver end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config thymeleafViewResolver:::mainFlowStyle -- templateEngine end subgraph booking-mvc/src/main/java/org/springframework/webflow/samples/booking/config templateEngine:::mainFlowStyle -- templateResolver end templateResolver:::mainFlowStyle -- ... classDef mainFlowStyle color:#000000,fill:#7CB9F4 classDef rootsStyle color:#000000,fill:#00FFF4 classDef Style1 color:#000000,fill:#00FFAA classDef Style2 color:#000000,fill:#FFFF00 classDef Style3 color:#000000,fill:#AA7CB9 Initializing the flow executor The flowExecutor method initializes the flow executor. It adds a SecurityFlowExecutionListener to the flow executor for all flows, denoted by '*' @Bean public FlowExecutor flowExecutor() { return getFlowExecutorBuilder(flowRegistry()) .addFlowExecutionListener(new SecurityFlowExecutionListener(), * ) .build(); } Registering the flow The flowRegistry method registers the flow. It sets the base path to '/WEB-INF' and adds a flow location pattern to match all XML files ending with '-flow.xml' @Bean public FlowDefinitionRegistry flowRegistry() { return getFlowDefinitionRegistryBuilder(flowBuilderServices()) .setBasePath( /WEB-INF ) .addFlowLocationPattern( /**/*-flow.xml ).build(); } Building the flow services The flowBuilderServices method builds the flow services. It sets the view factory creator and the validator, and enables the development mode @Bean public FlowBuilderServices flowBuilderServices() { return getFlowBuilderServicesBuilder() .setViewFactoryCreator(mvcViewFactoryCreator()) .setValidator(validator()) .setDevelopmentMode(true) .build(); } Creating the MVC view factory The mvcViewFactoryCreator method creates the MVC view factory. It sets the view resolvers and enables the use of Spring bean binding @Bean public MvcViewFactoryCreator mvcViewFactoryCreator() { MvcViewFactoryCreator factoryCreator = new MvcViewFactoryCreator(); factoryCreator.setViewResolvers(Collections.singletonList(this.webMvcConfig.thymeleafViewResolver())); factoryCreator.setUseSpringBeanBinding(true); return factoryCreator; } Resolving the Thymeleaf view The thymeleafViewResolver method resolves the Thymeleaf view. It sets the view class and the template engine @Bean public AjaxThymeleafViewResolver thymeleafViewResolver() { AjaxThymeleafViewResolver viewResolver = new AjaxThymeleafViewResolver(); viewResolver.setViewClass(FlowAjaxThymeleafView.class); viewResolver.setTemplateEngine(templateEngine()); return viewResolver; } Setting up the template engine The templateEngine method sets up the template engine. It adds a new SpringSecurityDialect , sets the template resolver, and adds additional dialects @Bean public SpringTemplateEngine templateEngine(){ Set IDialect dialects = new LinkedHashSet (); dialects.add(new SpringSecurityDialect()); SpringTemplateEngine templateEngine = new SpringTemplateEngine(); templateEngine.setTemplateResolver(templateResolver()); templateEngine.setAdditionalDialects(dialects); return templateEngine; } Resolving the template The templateResolver method resolves the template. It builds a web application, sets the prefix and suffix, and sets the template mode to 'HTML5' @Bean public WebApplicationTemplateResolver templateResolver() { IWebApplication application = JakartaServletWebApplication.buildApplication(this.servletContext); WebApplicationTemplateResolver resolver = new WebApplicationTemplateResolver(application); resolver.setPrefix( /WEB-INF/ ); resolver.setSuffix( .html ); resolver.setTemplateMode( HTML5 ); return resolver; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Web Flow Handling Process"},{"location":"web-flow-handling-process.ax7s4x6p.sw/#initializing-the-flow-executor","text":"The flowExecutor method initializes the flow executor. It adds a SecurityFlowExecutionListener to the flow executor for all flows, denoted by '*' @Bean public FlowExecutor flowExecutor() { return getFlowExecutorBuilder(flowRegistry()) .addFlowExecutionListener(new SecurityFlowExecutionListener(), * ) .build(); }","title":"Initializing the flow executor"},{"location":"web-flow-handling-process.ax7s4x6p.sw/#registering-the-flow","text":"The flowRegistry method registers the flow. It sets the base path to '/WEB-INF' and adds a flow location pattern to match all XML files ending with '-flow.xml' @Bean public FlowDefinitionRegistry flowRegistry() { return getFlowDefinitionRegistryBuilder(flowBuilderServices()) .setBasePath( /WEB-INF ) .addFlowLocationPattern( /**/*-flow.xml ).build(); }","title":"Registering the flow"},{"location":"web-flow-handling-process.ax7s4x6p.sw/#building-the-flow-services","text":"The flowBuilderServices method builds the flow services. It sets the view factory creator and the validator, and enables the development mode @Bean public FlowBuilderServices flowBuilderServices() { return getFlowBuilderServicesBuilder() .setViewFactoryCreator(mvcViewFactoryCreator()) .setValidator(validator()) .setDevelopmentMode(true) .build(); }","title":"Building the flow services"},{"location":"web-flow-handling-process.ax7s4x6p.sw/#creating-the-mvc-view-factory","text":"The mvcViewFactoryCreator method creates the MVC view factory. It sets the view resolvers and enables the use of Spring bean binding @Bean public MvcViewFactoryCreator mvcViewFactoryCreator() { MvcViewFactoryCreator factoryCreator = new MvcViewFactoryCreator(); factoryCreator.setViewResolvers(Collections.singletonList(this.webMvcConfig.thymeleafViewResolver())); factoryCreator.setUseSpringBeanBinding(true); return factoryCreator; }","title":"Creating the MVC view factory"},{"location":"web-flow-handling-process.ax7s4x6p.sw/#resolving-the-thymeleaf-view","text":"The thymeleafViewResolver method resolves the Thymeleaf view. It sets the view class and the template engine @Bean public AjaxThymeleafViewResolver thymeleafViewResolver() { AjaxThymeleafViewResolver viewResolver = new AjaxThymeleafViewResolver(); viewResolver.setViewClass(FlowAjaxThymeleafView.class); viewResolver.setTemplateEngine(templateEngine()); return viewResolver; }","title":"Resolving the Thymeleaf view"},{"location":"web-flow-handling-process.ax7s4x6p.sw/#setting-up-the-template-engine","text":"The templateEngine method sets up the template engine. It adds a new SpringSecurityDialect , sets the template resolver, and adds additional dialects @Bean public SpringTemplateEngine templateEngine(){ Set IDialect dialects = new LinkedHashSet (); dialects.add(new SpringSecurityDialect()); SpringTemplateEngine templateEngine = new SpringTemplateEngine(); templateEngine.setTemplateResolver(templateResolver()); templateEngine.setAdditionalDialects(dialects); return templateEngine; }","title":"Setting up the template engine"},{"location":"web-flow-handling-process.ax7s4x6p.sw/#resolving-the-template","text":"The templateResolver method resolves the template. It builds a web application, sets the prefix and suffix, and sets the template mode to 'HTML5' @Bean public WebApplicationTemplateResolver templateResolver() { IWebApplication application = JakartaServletWebApplication.buildApplication(this.servletContext); WebApplicationTemplateResolver resolver = new WebApplicationTemplateResolver(application); resolver.setPrefix( /WEB-INF/ ); resolver.setSuffix( .html ); resolver.setTemplateMode( HTML5 ); return resolver; } This is an auto-generated document by Swimm AI \ud83c\udf0a and has not yet been verified by a human Powered by Swimm","title":"Resolving the template"}]}